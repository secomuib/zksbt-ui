{
  "address": "0xA701DDeb4825108481867155465e1D1be78501a2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IVerifier",
          "name": "verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emittedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEncryptedData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVerifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "hasValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holdersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "root",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedCreditScore",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedIncome",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedReportDate",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sbtData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "root",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedCreditScore",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedIncome",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedReportDate",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[]",
          "name": "publicValues",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e783572537617bb3b5cc329eac226c756fbf6d9cbc6cdb8ab80a1c30e93fd91",
  "receipt": {
    "to": null,
    "from": "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "contractAddress": "0xA701DDeb4825108481867155465e1D1be78501a2",
    "transactionIndex": 23,
    "gasUsed": "2678177",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000020000001000000000000000000000000200000000000020000000000000000000800000000000000000000000000000000400000020000000000000000000000000000000080000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xec1e978f0826ca679f722de8f2c864468561b0232ec345ae3195287b308749f2",
    "transactionHash": "0x3e783572537617bb3b5cc329eac226c756fbf6d9cbc6cdb8ab80a1c30e93fd91",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 10078281,
        "transactionHash": "0x3e783572537617bb3b5cc329eac226c756fbf6d9cbc6cdb8ab80a1c30e93fd91",
        "address": "0xA701DDeb4825108481867155465e1D1be78501a2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0xec1e978f0826ca679f722de8f2c864468561b0232ec345ae3195287b308749f2"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 10078281,
        "transactionHash": "0x3e783572537617bb3b5cc329eac226c756fbf6d9cbc6cdb8ab80a1c30e93fd91",
        "address": "0xA701DDeb4825108481867155465e1D1be78501a2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0xec1e978f0826ca679f722de8f2c864468561b0232ec345ae3195287b308749f2"
      }
    ],
    "blockNumber": 10078281,
    "cumulativeGasUsed": "5777764",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "ZKP SBT",
    "ZKSBT",
    "0xB5ae2B52a356065364A455cfD27dd3E2e31fFa61"
  ],
  "numDeployments": 2,
  "solcInputHash": "b409a90b1e08735af7fdfb8a371d1d6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IVerifier\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emittedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEncryptedData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"root\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedCreditScore\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedIncome\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedReportDate\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sbtData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"root\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedCreditScore\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedIncome\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedReportDate\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[]\",\"name\":\"publicValues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Miquel A. Cabot\",\"details\":\"Inherits from the SSBT contract\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"owner\":\"Address for whom to query the balance\"},\"returns\":{\"_0\":\"Number of tokens owned by `owner`\"}},\"constructor\":{\"details\":\"Creates a new ZKP SBT, inheriting from the SBT contract.\",\"params\":{\"admin\":\"Administrator of the smart contract\",\"name\":\"Name of the token\",\"symbol\":\"Symbol of the token\",\"verifier\":\"Verifier smart contract\"}},\"emittedCount()\":{\"returns\":{\"_0\":\"emittedCount Number of tokens emitted\"}},\"getEncryptedData(uint256)\":{\"params\":{\"tokenId\":\"The SBT ID\"},\"returns\":{\"_0\":\"The encrypted data with the public key of the owner of the SBT\"}},\"getRoot(uint256)\":{\"params\":{\"tokenId\":\"The SBT ID\"},\"returns\":{\"_0\":\"The root of the Merkle Tree's data without encryption, used to verify the data\"}},\"getVerifier()\":{\"returns\":{\"_0\":\"The verifier smart contract\"}},\"hasValid(address)\":{\"params\":{\"owner\":\"Address for whom to check the ownership\"},\"returns\":{\"_0\":\"True if `owner` has a valid token, false otherwise\"}},\"holdersCount()\":{\"returns\":{\"_0\":\"holdersCount Number of token holders\"}},\"isValid(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"True if the token is valid, false otherwise\"}},\"mint(address,bytes,(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes))\":{\"details\":\"The caller must have the MINTER role\",\"params\":{\"encryptedCreditScore\":\"Encrypted credit score\",\"encryptedIncome\":\"Encrypted income\",\"encryptedReportDate\":\"Encrypted report date\",\"root\":\"Root of the Merkle Tree's data without encryption, used to verify the data\",\"to\":\"The address to mint the SBT to\"},\"returns\":{\"_0\":\"The SBT ID of the newly minted SBT\"}},\"name()\":{\"returns\":{\"_0\":\"Descriptive name of the tokens in this contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"Address of the owner of `tokenId`\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"returns\":{\"_0\":\"An abbreviated name of the tokens in this contract\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"Index of the token\"},\"returns\":{\"_0\":\"tokenId of the token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"Index of the token\",\"owner\":\"Address for whom to get the token\"},\"returns\":{\"_0\":\"tokenId of the token\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"URI for the token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ZKP SBT\",\"version\":1},\"userdoc\":{\"events\":{\"Minted(address,uint256)\":{\"notice\":\"Event emitted when a token `tokenId` is minted for `owner`\"},\"Revoked(address,uint256)\":{\"notice\":\"Event emitted when token `tokenId` of `owner` is revoked\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Count all tokens assigned to an owner\"},\"constructor\":{\"notice\":\"Creates a new ZKP SBT\"},\"getEncryptedData(uint256)\":{\"notice\":\"Returns the encrypted data with the public key of the owner of the SBT\"},\"getRoot(uint256)\":{\"notice\":\"Returns the root of the Merkle Tree's data without encryption, used to verify the data\"},\"getVerifier()\":{\"notice\":\"Returns the verifier smart contract\"},\"hasValid(address)\":{\"notice\":\"Check if an address owns a valid token in the contract\"},\"isValid(uint256)\":{\"notice\":\"Check if a token hasn't been revoked\"},\"mint(address,bytes,(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes))\":{\"notice\":\"Mints a new SBT\"},\"ownerOf(uint256)\":{\"notice\":\"Get owner of a token\"},\"tokenByIndex(uint256)\":{\"notice\":\"Get a tokenId by it's index, where 0 <= index < total()\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Get the tokenId of a token using its position in the owner's list\"},\"tokenURI(uint256)\":{\"notice\":\"URI to query to get the token's metadata\"}},\"notice\":\"Soulbound token implementing ZKP\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZKSBT.sol\":\"ZKSBT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ZKSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./eip-4671/ERC4671.sol\\\";\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint[2] memory a,\\n        uint[2][2] memory b,\\n        uint[2] memory c,\\n        uint[5] memory input\\n    ) external view returns (bool);\\n}\\n\\n/// @title ZKP SBT\\n/// @author Miquel A. Cabot\\n/// @notice Soulbound token implementing ZKP\\n/// @dev Inherits from the SSBT contract\\ncontract ZKSBT is ERC4671, Ownable {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    IVerifier internal _verifier;\\n\\n    struct EncryptedData {\\n        bytes iv; // IV\\n        bytes ephemPublicKey; // ephemPublicKey\\n        bytes ciphertext; // ciphertext\\n        bytes mac; // mac\\n    }\\n\\n    // Struct to store the encrypted data with the public key of the owner of the SBT\\n    struct SBTData {\\n        bytes root; // root of the Merkle Tree's data without encryption, used to verify the data\\n        // encrypted data with the public key of the owner of the SBT\\n        EncryptedData encryptedCreditScore;\\n        EncryptedData encryptedIncome;\\n        EncryptedData encryptedReportDate;\\n    }\\n\\n    // tokenId => SBTData\\n    mapping(uint256 => SBTData) public sbtData;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new ZKP SBT\\n    /// @dev Creates a new ZKP SBT, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param verifier Verifier smart contract\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        IVerifier verifier\\n    ) ERC4671(name, symbol) {\\n        Ownable.transferOwnership(admin);\\n        _verifier = verifier;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param to The address to mint the SBT to\\n    /// @param root Root of the Merkle Tree's data without encryption, used to verify the data\\n    /// @param encryptedCreditScore Encrypted credit score\\n    /// @param encryptedIncome Encrypted income\\n    /// @param encryptedReportDate Encrypted report date\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address to,\\n        bytes calldata root,\\n        EncryptedData calldata encryptedCreditScore,\\n        EncryptedData calldata encryptedIncome,\\n        EncryptedData calldata encryptedReportDate /* onlyOwner */\\n    ) external payable virtual returns (uint256) {\\n        uint256 tokenId = _mint(to);\\n\\n        sbtData[tokenId] = SBTData({\\n            root: root,\\n            encryptedCreditScore: encryptedCreditScore,\\n            encryptedIncome: encryptedIncome,\\n            encryptedReportDate: encryptedReportDate\\n        });\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the verifier smart contract\\n    /// @return The verifier smart contract\\n    function getVerifier() external view returns (IVerifier) {\\n        return _verifier;\\n    }\\n\\n    /// @notice Returns the root of the Merkle Tree's data without encryption, used to verify the data\\n    /// @param tokenId The SBT ID\\n    /// @return The root of the Merkle Tree's data without encryption, used to verify the data\\n    function getRoot(uint256 tokenId) public view returns (bytes memory) {\\n        return sbtData[tokenId].root;\\n    }\\n\\n    /// @notice Returns the encrypted data with the public key of the owner of the SBT\\n    /// @param tokenId The SBT ID\\n    /// @return The encrypted data with the public key of the owner of the SBT\\n    function getEncryptedData(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            EncryptedData memory,\\n            EncryptedData memory,\\n            EncryptedData memory\\n        )\\n    {\\n        return (\\n            sbtData[tokenId].encryptedCreditScore,\\n            sbtData[tokenId].encryptedIncome,\\n            sbtData[tokenId].encryptedReportDate\\n        );\\n    }\\n\\n    // @notice verifies the validity of the proof, and make further verifications on the public\\n    // input of the circuit\\n    // @param a First part of the proof\\n    // @param b Second part of the proof\\n    // @param c Third part of the proof\\n    // @param publicValues Public input of the circuit\\n    // @param tokenId The SBT ID\\n    // @return True if the proof is valid, false otherwise\\n    function verifyProof(\\n        uint[2] memory a,\\n        uint[2][2] memory b,\\n        uint[2] memory c,\\n        uint[] memory publicValues,\\n        uint256 tokenId\\n    ) external view returns (bool) {\\n        // convert dynamic array to fixed array\\n        uint[5] memory pValues;\\n        for (uint i = 0; i < pValues.length; i++) {\\n            pValues[i] = publicValues[i];\\n        }\\n\\n        address owner = address(uint160(publicValues[2]));\\n\\n        require(\\n            publicValues[0] ==\\n                0x0000000000000000000000000000000000000000000000000000000000000001,\\n            \\\"The claim doesn't satisfy the query condition\\\"\\n        );\\n\\n        require(\\n            ownerOf(tokenId) == owner,\\n            \\\"The SBT doesn't belong to the address that is trying to claim the loan\\\"\\n        );\\n\\n        bytes memory root = getRoot(tokenId);\\n        require(\\n            keccak256(abi.encodePacked(root)) ==\\n                keccak256(abi.encodePacked(publicValues[1])),\\n            \\\"The root of the Merkle Tree's data doesn't match the root stored in the SBT\\\"\\n        );\\n\\n        require(\\n            _verifier.verifyProof(a, b, c, pValues),\\n            \\\"Proof verification failed\\\"\\n        );\\n\\n        return true;\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x83d3a6a91dfa27631ce7cce1c6aec6a72452336ed50085fc7f70ef2103ded745\",\"license\":\"MIT\"},\"contracts/eip-4671/ERC4671.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./IERC4671.sol\\\";\\nimport \\\"./IERC4671Metadata.sol\\\";\\nimport \\\"./IERC4671Enumerable.sol\\\";\\n\\nabstract contract ERC4671 is\\n    IERC4671,\\n    IERC4671Metadata,\\n    IERC4671Enumerable,\\n    ERC165\\n{\\n    // Token data\\n    struct Token {\\n        address issuer;\\n        address owner;\\n        bool valid;\\n    }\\n\\n    // Mapping from tokenId to token\\n    mapping(uint256 => Token) private _tokens;\\n\\n    // Mapping from owner to token ids\\n    mapping(address => uint256[]) private _indexedTokenIds;\\n\\n    // Mapping from token id to index\\n    mapping(address => mapping(uint256 => uint256)) private _tokenIdIndex;\\n\\n    // Mapping from owner to number of valid tokens\\n    mapping(address => uint256) private _numberOfValidTokens;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Total number of tokens emitted\\n    uint256 private _emittedCount;\\n\\n    // Total number of token holders\\n    uint256 private _holdersCount;\\n\\n    // Contract creator\\n    address private _creator;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _creator = msg.sender;\\n    }\\n\\n    /// @notice Count all tokens assigned to an owner\\n    /// @param owner Address for whom to query the balance\\n    /// @return Number of tokens owned by `owner`\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        return _indexedTokenIds[owner].length;\\n    }\\n\\n    /// @notice Get owner of a token\\n    /// @param tokenId Identifier of the token\\n    /// @return Address of the owner of `tokenId`\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        return _getTokenOrRevert(tokenId).owner;\\n    }\\n\\n    /// @notice Check if a token hasn't been revoked\\n    /// @param tokenId Identifier of the token\\n    /// @return True if the token is valid, false otherwise\\n    function isValid(\\n        uint256 tokenId\\n    ) public view virtual override returns (bool) {\\n        return _getTokenOrRevert(tokenId).valid;\\n    }\\n\\n    /// @notice Check if an address owns a valid token in the contract\\n    /// @param owner Address for whom to check the ownership\\n    /// @return True if `owner` has a valid token, false otherwise\\n    function hasValid(\\n        address owner\\n    ) public view virtual override returns (bool) {\\n        return _numberOfValidTokens[owner] > 0;\\n    }\\n\\n    /// @return Descriptive name of the tokens in this contract\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @return An abbreviated name of the tokens in this contract\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @notice URI to query to get the token's metadata\\n    /// @param tokenId Identifier of the token\\n    /// @return URI for the token\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _getTokenOrRevert(tokenId);\\n        bytes memory baseURI = bytes(_baseURI());\\n        if (baseURI.length > 0) {\\n            return\\n                string(\\n                    abi.encodePacked(baseURI, Strings.toHexString(tokenId, 32))\\n                );\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    /// @return emittedCount Number of tokens emitted\\n    function emittedCount() public view override returns (uint256) {\\n        return _emittedCount;\\n    }\\n\\n    /// @return holdersCount Number of token holders\\n    function holdersCount() public view override returns (uint256) {\\n        return _holdersCount;\\n    }\\n\\n    /// @notice Get the tokenId of a token using its position in the owner's list\\n    /// @param owner Address for whom to get the token\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        uint256[] storage ids = _indexedTokenIds[owner];\\n        require(index < ids.length, \\\"Token does not exist\\\");\\n        return ids[index];\\n    }\\n\\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenByIndex(\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        return index;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC4671).interfaceId ||\\n            interfaceId == type(IERC4671Metadata).interfaceId ||\\n            interfaceId == type(IERC4671Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Prefix for all calls to tokenURI\\n    /// @return Common base URI for all token\\n    function _baseURI() internal pure virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @notice Mark the token as revoked\\n    /// @param tokenId Identifier of the token\\n    function _revoke(uint256 tokenId) internal virtual {\\n        Token storage token = _getTokenOrRevert(tokenId);\\n        require(token.valid, \\\"Token is already invalid\\\");\\n        token.valid = false;\\n        assert(_numberOfValidTokens[token.owner] > 0);\\n        _numberOfValidTokens[token.owner] -= 1;\\n        emit Revoked(token.owner, tokenId);\\n    }\\n\\n    /// @notice Mint a new token\\n    /// @param owner Address for whom to assign the token\\n    /// @return tokenId Identifier of the minted token\\n    function _mint(address owner) internal virtual returns (uint256 tokenId) {\\n        tokenId = _emittedCount;\\n        _mintUnsafe(owner, tokenId, true);\\n        emit Minted(owner, tokenId);\\n        _emittedCount += 1;\\n    }\\n\\n    /// @notice Mint a given tokenId\\n    /// @param owner Address for whom to assign the token\\n    /// @param tokenId Token identifier to assign to the owner\\n    /// @param valid Boolean to assert of the validity of the token\\n    function _mintUnsafe(address owner, uint256 tokenId, bool valid) internal {\\n        require(\\n            _tokens[tokenId].owner == address(0),\\n            \\\"Cannot mint an assigned token\\\"\\n        );\\n        if (_indexedTokenIds[owner].length == 0) {\\n            _holdersCount += 1;\\n        }\\n        _tokens[tokenId] = Token(msg.sender, owner, valid);\\n        _tokenIdIndex[owner][tokenId] = _indexedTokenIds[owner].length;\\n        _indexedTokenIds[owner].push(tokenId);\\n        if (valid) {\\n            _numberOfValidTokens[owner] += 1;\\n        }\\n    }\\n\\n    /// @return True if the caller is the contract's creator, false otherwise\\n    function _isCreator() internal view virtual returns (bool) {\\n        return msg.sender == _creator;\\n    }\\n\\n    /// @notice Retrieve a token or revert if it does not exist\\n    /// @param tokenId Identifier of the token\\n    /// @return The Token struct\\n    function _getTokenOrRevert(\\n        uint256 tokenId\\n    ) internal view virtual returns (Token storage) {\\n        Token storage token = _tokens[tokenId];\\n        require(token.owner != address(0), \\\"Token does not exist\\\");\\n        return token;\\n    }\\n\\n    /// @notice Remove a token\\n    /// @param tokenId Token identifier to remove\\n    function _removeToken(uint256 tokenId) internal virtual {\\n        Token storage token = _getTokenOrRevert(tokenId);\\n        _removeFromUnorderedArray(\\n            _indexedTokenIds[token.owner],\\n            _tokenIdIndex[token.owner][tokenId]\\n        );\\n        if (_indexedTokenIds[token.owner].length == 0) {\\n            assert(_holdersCount > 0);\\n            _holdersCount -= 1;\\n        }\\n        if (token.valid) {\\n            assert(_numberOfValidTokens[token.owner] > 0);\\n            _numberOfValidTokens[token.owner] -= 1;\\n        }\\n        delete _tokens[tokenId];\\n    }\\n\\n    /// @notice Removes an entry in an array by its index\\n    /// @param array Array for which to remove the entry\\n    /// @param index Index of the entry to remove\\n    function _removeFromUnorderedArray(\\n        uint256[] storage array,\\n        uint256 index\\n    ) internal {\\n        require(index < array.length, \\\"Trying to delete out of bound index\\\");\\n        if (index != array.length - 1) {\\n            array[index] = array[array.length - 1];\\n        }\\n        array.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x57385f8ebd3123d2408b5d03f0cd54a68039f9ae74a5695d54c5c2f5acf63557\",\"license\":\"CC0-1.0\"},\"contracts/eip-4671/IERC4671.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC4671 is IERC165 {\\n    /// Event emitted when a token `tokenId` is minted for `owner`\\n    event Minted(address owner, uint256 tokenId);\\n\\n    /// Event emitted when token `tokenId` of `owner` is revoked\\n    event Revoked(address owner, uint256 tokenId);\\n\\n    /// @notice Count all tokens assigned to an owner\\n    /// @param owner Address for whom to query the balance\\n    /// @return Number of tokens owned by `owner`\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @notice Get owner of a token\\n    /// @param tokenId Identifier of the token\\n    /// @return Address of the owner of `tokenId`\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /// @notice Check if a token hasn't been revoked\\n    /// @param tokenId Identifier of the token\\n    /// @return True if the token is valid, false otherwise\\n    function isValid(uint256 tokenId) external view returns (bool);\\n\\n    /// @notice Check if an address owns a valid token in the contract\\n    /// @param owner Address for whom to check the ownership\\n    /// @return True if `owner` has a valid token, false otherwise\\n    function hasValid(address owner) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x066b181b71b988f8bb2325f6a908765647f41c971541f99b319c58e27ae92251\",\"license\":\"CC0-1.0\"},\"contracts/eip-4671/IERC4671Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC4671.sol\\\";\\n\\ninterface IERC4671Enumerable is IERC4671 {\\n    /// @return emittedCount Number of tokens emitted\\n    function emittedCount() external view returns (uint256);\\n\\n    /// @return holdersCount Number of token holders\\n    function holdersCount() external view returns (uint256);\\n\\n    /// @notice Get the tokenId of a token using its position in the owner's list\\n    /// @param owner Address for whom to get the token\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd69c4184eeab03125ba5d23cb1d5df1b9c453c3aa42d7c276a8042fb848866ee\",\"license\":\"CC0-1.0\"},\"contracts/eip-4671/IERC4671Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC4671.sol\\\";\\n\\ninterface IERC4671Metadata is IERC4671 {\\n    /// @return Descriptive name of the tokens in this contract\\n    function name() external view returns (string memory);\\n\\n    /// @return An abbreviated name of the tokens in this contract\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice URI to query to get the token's metadata\\n    /// @param tokenId Identifier of the token\\n    /// @return URI for the token\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x896544fd1e8604925fff1daa332f9de78faa80c8aaabad0f140ae4a15576db72\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200325b3803806200325b8339810160408190526200003491620003e4565b8251839083906200004d90600490602085019062000195565b5080516200006390600590602084019062000195565b5050600880546001600160a01b03191633179055506200008a620000843390565b620000ca565b620000a0846200011c60201b620019c61760201c565b600a80546001600160a01b0319166001600160a01b03929092169190911790555062000557915050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200012662000166565b6001600160a01b038116620001585760405162461bcd60e51b81526004016200014f906200048a565b60405180910390fd5b6200016381620000ca565b50565b6009546001600160a01b03163314620001935760405162461bcd60e51b81526004016200014f90620004d5565b565b828054620001a39062000526565b90600052602060002090601f016020900481019282620001c7576000855562000212565b82601f10620001e257805160ff191683800117855562000212565b8280016001018555821562000212579182015b8281111562000212578251825591602001919060010190620001f5565b506200022092915062000224565b5090565b5b8082111562000220576000815560010162000225565b60006001600160a01b0382165b92915050565b62000259816200023b565b81146200016357600080fd5b805162000248816200024e565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b6200029d8262000272565b81018181106001600160401b0382111715620002bd57620002bd6200027c565b6040525050565b6000620002d060405190565b9050620002de828262000292565b919050565b60006001600160401b03821115620002ff57620002ff6200027c565b6200030a8262000272565b60200192915050565b60005b838110156200033057818101518382015260200162000316565b8381111562000340576000848401525b50505050565b60006200035d6200035784620002e3565b620002c4565b9050828152602081018484840111156200037a576200037a600080fd5b6200038784828562000313565b509392505050565b600082601f830112620003a557620003a5600080fd5b8151620003b784826020860162000346565b949350505050565b600062000248826200023b565b6200025981620003bf565b80516200024881620003cc565b60008060008060808587031215620003ff57620003ff600080fd5b60006200040d878762000265565b94505060208501516001600160401b038111156200042e576200042e600080fd5b6200043c878288016200038f565b93505060408501516001600160401b038111156200045d576200045d600080fd5b6200046b878288016200038f565b92505060606200047e87828801620003d7565b91505092959194509250565b602080825281016200024881602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820162000248565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200053b57607f821691505b6020821081141562000551576200055162000510565b50919050565b612cf480620005676000396000f3fe6080604052600436106100fa5760003560e01c806301ffc9a7146100ff57806306fdde031461013557806326019c18146101575780632f745c59146101755780633ec0b0bc1461019557806343945512146101c457806343c7db9a146101fc57806346657fe91461020f5780634f6ccce7146102355780636352211e146102535780636743734c146102805780636b4ed21b146102a057806370a08231146102b5578063715018a6146102eb578063776fafac146103025780638da5cb5b1461033257806395d89b41146103475780639b24b3b01461035c578063c87b56dd1461037c578063f2fde38b1461039c578063f577a500146103bc575b600080fd5b34801561010b57600080fd5b5061011f61011a366004611efc565b6103dc565b60405161012c9190611f2f565b60405180910390f35b34801561014157600080fd5b5061014a610449565b60405161012c9190611fab565b34801561016357600080fd5b506006545b60405161012c9190611fc2565b34801561018157600080fd5b5061016861019036600461200c565b6104db565b3480156101a157600080fd5b506101b56101b0366004612049565b610542565b60405161012c939291906120d0565b3480156101d057600080fd5b5061011f6101df366004612109565b6001600160a01b0316600090815260036020526040902054151590565b61016861020a366004612196565b610c86565b34801561021b57600080fd5b50600a546001600160a01b031660405161012c91906122ae565b34801561024157600080fd5b50610168610250366004612049565b90565b34801561025f57600080fd5b5061027361026e366004612049565b610e86565b60405161012c91906122c5565b34801561028c57600080fd5b5061011f61029b3660046124d3565b610ea4565b3480156102ac57600080fd5b50600754610168565b3480156102c157600080fd5b506101686102d0366004612109565b6001600160a01b031660009081526001602052604090205490565b3480156102f757600080fd5b506103006110d5565b005b34801561030e57600080fd5b5061032261031d366004612049565b6110e9565b60405161012c9493929190612568565b34801561033e57600080fd5b5061027361188f565b34801561035357600080fd5b5061014a61189e565b34801561036857600080fd5b5061014a610377366004612049565b6118ad565b34801561038857600080fd5b5061014a610397366004612049565b61194f565b3480156103a857600080fd5b506103006103b7366004612109565b6119c6565b3480156103c857600080fd5b5061011f6103d7366004612049565b611a00565b60006001600160e01b0319821663a511533d60e01b148061040d57506001600160e01b03198216635b5e139f60e01b145b8061042857506001600160e01b03198216632d57debd60e01b145b8061044357506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060048054610458906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610484906125d5565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b5050505050905090565b6001600160a01b03821660009081526001602052604081208054831061051c5760405162461bcd60e51b81526004016105139061262a565b60405180910390fd5b80838154811061052e5761052e61263a565b906000526020600020015491505092915050565b61054a611dfb565b610552611dfb565b61055a611dfb565b6000848152600b6020526040908190208151608081019092526001810180549092600583019260090191849082908290610593906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546105bf906125d5565b801561060c5780601f106105e15761010080835404028352916020019161060c565b820191906000526020600020905b8154815290600101906020018083116105ef57829003601f168201915b50505050508152602001600182018054610625906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610651906125d5565b801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b505050505081526020016002820180546106b7906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546106e3906125d5565b80156107305780601f1061070557610100808354040283529160200191610730565b820191906000526020600020905b81548152906001019060200180831161071357829003601f168201915b50505050508152602001600382018054610749906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610775906125d5565b80156107c25780601f10610797576101008083540402835291602001916107c2565b820191906000526020600020905b8154815290600101906020018083116107a557829003601f168201915b5050505050815250509250816040518060800160405290816000820180546107e9906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610815906125d5565b80156108625780601f1061083757610100808354040283529160200191610862565b820191906000526020600020905b81548152906001019060200180831161084557829003601f168201915b5050505050815260200160018201805461087b906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546108a7906125d5565b80156108f45780601f106108c9576101008083540402835291602001916108f4565b820191906000526020600020905b8154815290600101906020018083116108d757829003601f168201915b5050505050815260200160028201805461090d906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610939906125d5565b80156109865780601f1061095b57610100808354040283529160200191610986565b820191906000526020600020905b81548152906001019060200180831161096957829003601f168201915b5050505050815260200160038201805461099f906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546109cb906125d5565b8015610a185780601f106109ed57610100808354040283529160200191610a18565b820191906000526020600020905b8154815290600101906020018083116109fb57829003601f168201915b505050505081525050915080604051806080016040529081600082018054610a3f906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6b906125d5565b8015610ab85780601f10610a8d57610100808354040283529160200191610ab8565b820191906000526020600020905b815481529060010190602001808311610a9b57829003601f168201915b50505050508152602001600182018054610ad1906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610afd906125d5565b8015610b4a5780601f10610b1f57610100808354040283529160200191610b4a565b820191906000526020600020905b815481529060010190602001808311610b2d57829003601f168201915b50505050508152602001600282018054610b63906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8f906125d5565b8015610bdc5780601f10610bb157610100808354040283529160200191610bdc565b820191906000526020600020905b815481529060010190602001808311610bbf57829003601f168201915b50505050508152602001600382018054610bf5906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c21906125d5565b8015610c6e5780601f10610c4357610100808354040283529160200191610c6e565b820191906000526020600020905b815481529060010190602001808311610c5157829003601f168201915b50505050508152505090509250925092509193909250565b600080610c9288611a1f565b6040805160a06020601f8b018190040282018101909252608081018981529293509182918a908a9081908501838280828437600092019190915250505090825250602001610cdf876127c0565b8152602001610ced866127c0565b8152602001610cfb856127c0565b90526000828152600b60209081526040909120825180519192610d2392849290910190611e23565b506020828101518051805191926001850192610d429284920190611e23565b506020828101518051610d5b9260018501920190611e23565b5060408201518051610d77916002840191602090910190611e23565b5060608201518051610d93916003840191602090910190611e23565b5050506040820151805180516005840191610db391839160200190611e23565b506020828101518051610dcc9260018501920190611e23565b5060408201518051610de8916002840191602090910190611e23565b5060608201518051610e04916003840191602090910190611e23565b5050506060820151805180516009840191610e2491839160200190611e23565b506020828101518051610e3d9260018501920190611e23565b5060408201518051610e59916002840191602090910190611e23565b5060608201518051610e75916003840191602090910190611e23565b50939b9a5050505050505050505050565b6000610e9182611a85565b600101546001600160a01b031692915050565b6000610eae611ea7565b60005b6005811015610efd57848181518110610ecc57610ecc61263a565b6020026020010151828260058110610ee657610ee661263a565b602002015280610ef5816127e2565b915050610eb1565b50600084600281518110610f1357610f1361263a565b6020026020010151905084600081518110610f3057610f3061263a565b6020026020010151600114610f575760405162461bcd60e51b81526004016105139061284a565b806001600160a01b0316610f6a85610e86565b6001600160a01b031614610f905760405162461bcd60e51b8152600401610513906128c6565b6000610f9b856118ad565b905085600181518110610fb057610fb061263a565b6020026020010151604051602001610fc891906128d6565b6040516020818303038152906040528051906020012081604051602001610fef919061290d565b60405160208183030381529060405280519060200120146110225760405162461bcd60e51b815260040161051390612987565b600a546040516334baeab960e01b81526001600160a01b03909116906334baeab990611058908c908c908c908990600401612a77565b60206040518083038186803b15801561107057600080fd5b505afa158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190612ac1565b6110c45760405162461bcd60e51b815260040161051390612b12565b600193505050505b95945050505050565b6110dd611abd565b6110e76000611aec565b565b600b60205260009081526040902080548190611104906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611130906125d5565b801561117d5780601f106111525761010080835404028352916020019161117d565b820191906000526020600020905b81548152906001019060200180831161116057829003601f168201915b505050505090806001016040518060800160405290816000820180546111a2906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546111ce906125d5565b801561121b5780601f106111f05761010080835404028352916020019161121b565b820191906000526020600020905b8154815290600101906020018083116111fe57829003601f168201915b50505050508152602001600182018054611234906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611260906125d5565b80156112ad5780601f10611282576101008083540402835291602001916112ad565b820191906000526020600020905b81548152906001019060200180831161129057829003601f168201915b505050505081526020016002820180546112c6906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546112f2906125d5565b801561133f5780601f106113145761010080835404028352916020019161133f565b820191906000526020600020905b81548152906001019060200180831161132257829003601f168201915b50505050508152602001600382018054611358906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611384906125d5565b80156113d15780601f106113a6576101008083540402835291602001916113d1565b820191906000526020600020905b8154815290600101906020018083116113b457829003601f168201915b50505050508152505090806005016040518060800160405290816000820180546113fa906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611426906125d5565b80156114735780601f1061144857610100808354040283529160200191611473565b820191906000526020600020905b81548152906001019060200180831161145657829003601f168201915b5050505050815260200160018201805461148c906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546114b8906125d5565b80156115055780601f106114da57610100808354040283529160200191611505565b820191906000526020600020905b8154815290600101906020018083116114e857829003601f168201915b5050505050815260200160028201805461151e906125d5565b80601f016020809104026020016040519081016040528092919081815260200182805461154a906125d5565b80156115975780601f1061156c57610100808354040283529160200191611597565b820191906000526020600020905b81548152906001019060200180831161157a57829003601f168201915b505050505081526020016003820180546115b0906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546115dc906125d5565b80156116295780601f106115fe57610100808354040283529160200191611629565b820191906000526020600020905b81548152906001019060200180831161160c57829003601f168201915b5050505050815250509080600901604051806080016040529081600082018054611652906125d5565b80601f016020809104026020016040519081016040528092919081815260200182805461167e906125d5565b80156116cb5780601f106116a0576101008083540402835291602001916116cb565b820191906000526020600020905b8154815290600101906020018083116116ae57829003601f168201915b505050505081526020016001820180546116e4906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611710906125d5565b801561175d5780601f106117325761010080835404028352916020019161175d565b820191906000526020600020905b81548152906001019060200180831161174057829003601f168201915b50505050508152602001600282018054611776906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546117a2906125d5565b80156117ef5780601f106117c4576101008083540402835291602001916117ef565b820191906000526020600020905b8154815290600101906020018083116117d257829003601f168201915b50505050508152602001600382018054611808906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611834906125d5565b80156118815780601f1061185657610100808354040283529160200191611881565b820191906000526020600020905b81548152906001019060200180831161186457829003601f168201915b505050505081525050905084565b6009546001600160a01b031690565b606060058054610458906125d5565b6000818152600b602052604090208054606091906118ca906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546118f6906125d5565b80156119435780601f1061191857610100808354040283529160200191611943565b820191906000526020600020905b81548152906001019060200180831161192657829003601f168201915b50505050509050919050565b606061195a82611a85565b50600061197260408051602081019091526000815290565b8051909150156119b05780611988846020611b3e565b604051602001611999929190612b22565b604051602081830303815290604052915050919050565b5050604080516020810190915260008152919050565b6119ce611abd565b6001600160a01b0381166119f45760405162461bcd60e51b815260040161051390612b7d565b6119fd81611aec565b50565b6000611a0b82611a85565b60010154600160a01b900460ff1692915050565b600654611a2e82826001611cb0565b7f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe8282604051611a5f929190612b8d565b60405180910390a1600160066000828254611a7a9190612ba8565b909155509092915050565b600081815260208190526040812060018101546001600160a01b03166104435760405162461bcd60e51b81526004016105139061262a565b33611ac661188f565b6001600160a01b0316146110e75760405162461bcd60e51b815260040161051390612bf2565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000611b4d836002612c02565b611b58906002612ba8565b6001600160401b03811115611b6f57611b6f6122d3565b6040519080825280601f01601f191660200182016040528015611b99576020820181803683370190505b509050600360fc1b81600081518110611bb457611bb461263a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611be357611be361263a565b60200101906001600160f81b031916908160001a9053506000611c07846002612c02565b611c12906001612ba8565b90505b6001811115611c8a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c4657611c4661263a565b1a60f81b828281518110611c5c57611c5c61263a565b60200101906001600160f81b031916908160001a90535060049490941c93611c8381612c21565b9050611c15565b508315611ca95760405162461bcd60e51b815260040161051390612c6a565b9392505050565b6000828152602081905260409020600101546001600160a01b031615611ce85760405162461bcd60e51b815260040161051390612cae565b6001600160a01b038316600090815260016020526040902054611d1e57600160076000828254611d189190612ba8565b90915550505b604080516060810182523381526001600160a01b0385811660208084018281528615801586880190815260008a8152808552888120975188549088166001600160a01b031990911617885592516001978801805492511515600160a01b026001600160a81b03199093169190971617179094559182528381528482208054600283528684208985528352958320869055848252938501845592815291909120909101839055611df6576001600160a01b0383166000908152600360205260408120805460019290611df0908490612ba8565b90915550505b505050565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b828054611e2f906125d5565b90600052602060002090601f016020900481019282611e515760008555611e97565b82601f10611e6a57805160ff1916838001178555611e97565b82800160010185558215611e97579182015b82811115611e97578251825591602001919060010190611e7c565b50611ea3929150611ec5565b5090565b6040518060a001604052806005906020820280368337509192915050565b5b80821115611ea35760008155600101611ec6565b6001600160e01b031981165b81146119fd57600080fd5b803561044381611eda565b600060208284031215611f1157611f11600080fd5b6000611f1d8484611ef1565b949350505050565b8015155b82525050565b602081016104438284611f25565b60005b83811015611f58578181015183820152602001611f40565b83811115611f67576000848401525b50505050565b601f01601f191690565b6000611f81825190565b808452602084019350611f98818560208601611f3d565b611fa181611f6d565b9093019392505050565b60208082528101611ca98184611f77565b80611f29565b602081016104438284611fbc565b6001600160a01b031690565b600061044382611fd0565b611ee681611fdc565b803561044381611fe7565b80611ee6565b803561044381611ffb565b6000806040838503121561202257612022600080fd5b600061202e8585611ff0565b925050602061203f85828601612001565b9150509250929050565b60006020828403121561205e5761205e600080fd5b6000611f1d8484612001565b80516080808452600091908401906120828282611f77565b9150506020830151848203602086015261209c8282611f77565b915050604083015184820360408601526120b68282611f77565b915050606083015184820360608601526110cc8282611f77565b606080825281016120e1818661206a565b905081810360208301526120f5818561206a565b905081810360408301526110cc818461206a565b60006020828403121561211e5761211e600080fd5b6000611f1d8484611ff0565b60008083601f84011261213f5761213f600080fd5b5081356001600160401b0381111561215957612159600080fd5b60208301915083600182028301111561217457612174600080fd5b9250929050565b60006080828403121561219057612190600080fd5b50919050565b60008060008060008060a087890312156121b2576121b2600080fd5b60006121be8989611ff0565b96505060208701356001600160401b038111156121dd576121dd600080fd5b6121e989828a0161212a565b955095505060408701356001600160401b0381111561220a5761220a600080fd5b61221689828a0161217b565b93505060608701356001600160401b0381111561223557612235600080fd5b61224189828a0161217b565b92505060808701356001600160401b0381111561226057612260600080fd5b61226c89828a0161217b565b9150509295509295509295565b600061044361228a61025084611fd0565b611fd0565b600061044382612279565b60006104438261228f565b611f298161229a565b6020810161044382846122a5565b611f2981611fdc565b6020810161044382846122bc565b634e487b7160e01b600052604160045260246000fd5b6122f282611f6d565b81018181106001600160401b038211171561230f5761230f6122d3565b6040525050565b600061232160405190565b905061232d82826122e9565b919050565b60006001600160401b0382111561234b5761234b6122d3565b5060200290565b600061236561236084612332565b612316565b9050806020840283018581111561237e5761237e600080fd5b835b818110156123a257806123938882612001565b84525060209283019201612380565b5050509392505050565b600082601f8301126123c0576123c0600080fd5b6002611f1d848285612352565b60006123db61236084612332565b905080604084028301858111156123f4576123f4600080fd5b835b818110156123a2578061240988826123ac565b8452506020909201916040016123f6565b600082601f83011261242e5761242e600080fd5b6002611f1d8482856123cd565b60006001600160401b03821115612454576124546122d3565b5060209081020190565b600061246c6123608461243b565b8381529050602080820190840283018581111561248b5761248b600080fd5b835b818110156123a257806124a08882612001565b8452506020928301920161248d565b600082601f8301126124c3576124c3600080fd5b8135611f1d84826020860161245e565b600080600080600061014086880312156124ef576124ef600080fd5b60006124fb88886123ac565b955050604061250c8882890161241a565b94505060c061251d888289016123ac565b9350506101008601356001600160401b0381111561253d5761253d600080fd5b612549888289016124af565b92505061012061255b88828901612001565b9150509295509295909350565b608080825281016125798187611f77565b9050818103602083015261258d818661206a565b905081810360408301526125a1818561206a565b905081810360608301526125b5818461206a565b9695505050505050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806125e957607f821691505b60208210811415612190576121906125bf565b6014815260006020820173151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b815291505b5060200190565b60208082528101610443816125fc565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b03821115612669576126696122d3565b61267282611f6d565b60200192915050565b82818337506000910152565b600061269561236084612650565b9050828152602081018484840111156126b0576126b0600080fd5b6126bb84828561267b565b509392505050565b600082601f8301126126d7576126d7600080fd5b8135611f1d848260208601612687565b6000608082840312156126fc576126fc600080fd5b6127066080612316565b905081356001600160401b0381111561272157612721600080fd5b61272d848285016126c3565b82525060208201356001600160401b0381111561274c5761274c600080fd5b612758848285016126c3565b60208301525060408201356001600160401b0381111561277a5761277a600080fd5b612786848285016126c3565b60408301525060608201356001600160401b038111156127a8576127a8600080fd5b6127b4848285016126c3565b60608301525092915050565b600061044336836126e7565b634e487b7160e01b600052601160045260246000fd5b60006000198214156127f6576127f66127cc565b5060010190565b602d81526000602082017f54686520636c61696d20646f65736e277420736174697366792074686520717581526c32b93c9031b7b73234ba34b7b760991b602082015291505b5060400190565b60208082528101610443816127fd565b604681526000602082017f5468652053425420646f65736e27742062656c6f6e6720746f2074686520616481527f6472657373207468617420697320747279696e6720746f20636c61696d20746860208201526532903637b0b760d11b604082015291505b5060600190565b602080825281016104438161285a565b60006128e28284611fbc565b50602001919050565b60006128f5825190565b612903818560208601611f3d565b9290920192915050565b6000611ca982846128eb565b604b81526000602082017f54686520726f6f74206f6620746865204d65726b6c652054726565277320646181527f746120646f65736e2774206d617463682074686520726f6f742073746f72656460208201526a081a5b881d1a194814d09560aa1b604082015291506128bf565b6020808252810161044381612919565b60006129a38383611fbc565b505060200190565b6002818060005b838110156129d75781516129c68782612997565b9650602083019250506001016129b2565b505050505050565b6002818060005b838110156129d75781516129fa8782612997565b9650602083019250506001016129e6565b6000612a1783836129df565b505060400190565b6002818060005b838110156129d7578151612a3a8782612a0b565b965060208301925050600101612a26565b6005818060005b838110156129d7578151612a668782612997565b965060208301925050600101612a52565b6101a08101612a8682876129ab565b612a936040830186612a1f565b612aa060c08301856129ab565b6110cc610100830184612a4b565b801515611ee6565b805161044381612aae565b600060208284031215612ad657612ad6600080fd5b6000611f1d8484612ab6565b6019815260006020820178141c9bdbd9881d995c9a599a58d85d1a5bdb8819985a5b1959603a1b81529150612623565b6020808252810161044381612ae2565b6000612b2e82856128eb565b9150611f1d82846128eb565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612843565b6020808252810161044381612b3a565b60408101612b9b82856122bc565b611ca96020830184611fbc565b60008219821115612bbb57612bbb6127cc565b500190565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612623565b6020808252810161044381612bc0565b6000816000190483118215151615612c1c57612c1c6127cc565b500290565b600081612c3057612c306127cc565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000612623565b6020808252810161044381612c38565b601d81526000602082017f43616e6e6f74206d696e7420616e2061737369676e656420746f6b656e00000081529150612623565b6020808252810161044381612c7a56fea26469706673582212208dd6fc525b683a7c7108c9fa79f840844a96a9f7275c156ab3f68085333010bc64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100fa5760003560e01c806301ffc9a7146100ff57806306fdde031461013557806326019c18146101575780632f745c59146101755780633ec0b0bc1461019557806343945512146101c457806343c7db9a146101fc57806346657fe91461020f5780634f6ccce7146102355780636352211e146102535780636743734c146102805780636b4ed21b146102a057806370a08231146102b5578063715018a6146102eb578063776fafac146103025780638da5cb5b1461033257806395d89b41146103475780639b24b3b01461035c578063c87b56dd1461037c578063f2fde38b1461039c578063f577a500146103bc575b600080fd5b34801561010b57600080fd5b5061011f61011a366004611efc565b6103dc565b60405161012c9190611f2f565b60405180910390f35b34801561014157600080fd5b5061014a610449565b60405161012c9190611fab565b34801561016357600080fd5b506006545b60405161012c9190611fc2565b34801561018157600080fd5b5061016861019036600461200c565b6104db565b3480156101a157600080fd5b506101b56101b0366004612049565b610542565b60405161012c939291906120d0565b3480156101d057600080fd5b5061011f6101df366004612109565b6001600160a01b0316600090815260036020526040902054151590565b61016861020a366004612196565b610c86565b34801561021b57600080fd5b50600a546001600160a01b031660405161012c91906122ae565b34801561024157600080fd5b50610168610250366004612049565b90565b34801561025f57600080fd5b5061027361026e366004612049565b610e86565b60405161012c91906122c5565b34801561028c57600080fd5b5061011f61029b3660046124d3565b610ea4565b3480156102ac57600080fd5b50600754610168565b3480156102c157600080fd5b506101686102d0366004612109565b6001600160a01b031660009081526001602052604090205490565b3480156102f757600080fd5b506103006110d5565b005b34801561030e57600080fd5b5061032261031d366004612049565b6110e9565b60405161012c9493929190612568565b34801561033e57600080fd5b5061027361188f565b34801561035357600080fd5b5061014a61189e565b34801561036857600080fd5b5061014a610377366004612049565b6118ad565b34801561038857600080fd5b5061014a610397366004612049565b61194f565b3480156103a857600080fd5b506103006103b7366004612109565b6119c6565b3480156103c857600080fd5b5061011f6103d7366004612049565b611a00565b60006001600160e01b0319821663a511533d60e01b148061040d57506001600160e01b03198216635b5e139f60e01b145b8061042857506001600160e01b03198216632d57debd60e01b145b8061044357506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060048054610458906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610484906125d5565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b5050505050905090565b6001600160a01b03821660009081526001602052604081208054831061051c5760405162461bcd60e51b81526004016105139061262a565b60405180910390fd5b80838154811061052e5761052e61263a565b906000526020600020015491505092915050565b61054a611dfb565b610552611dfb565b61055a611dfb565b6000848152600b6020526040908190208151608081019092526001810180549092600583019260090191849082908290610593906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546105bf906125d5565b801561060c5780601f106105e15761010080835404028352916020019161060c565b820191906000526020600020905b8154815290600101906020018083116105ef57829003601f168201915b50505050508152602001600182018054610625906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610651906125d5565b801561069e5780601f106106735761010080835404028352916020019161069e565b820191906000526020600020905b81548152906001019060200180831161068157829003601f168201915b505050505081526020016002820180546106b7906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546106e3906125d5565b80156107305780601f1061070557610100808354040283529160200191610730565b820191906000526020600020905b81548152906001019060200180831161071357829003601f168201915b50505050508152602001600382018054610749906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610775906125d5565b80156107c25780601f10610797576101008083540402835291602001916107c2565b820191906000526020600020905b8154815290600101906020018083116107a557829003601f168201915b5050505050815250509250816040518060800160405290816000820180546107e9906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610815906125d5565b80156108625780601f1061083757610100808354040283529160200191610862565b820191906000526020600020905b81548152906001019060200180831161084557829003601f168201915b5050505050815260200160018201805461087b906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546108a7906125d5565b80156108f45780601f106108c9576101008083540402835291602001916108f4565b820191906000526020600020905b8154815290600101906020018083116108d757829003601f168201915b5050505050815260200160028201805461090d906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610939906125d5565b80156109865780601f1061095b57610100808354040283529160200191610986565b820191906000526020600020905b81548152906001019060200180831161096957829003601f168201915b5050505050815260200160038201805461099f906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546109cb906125d5565b8015610a185780601f106109ed57610100808354040283529160200191610a18565b820191906000526020600020905b8154815290600101906020018083116109fb57829003601f168201915b505050505081525050915080604051806080016040529081600082018054610a3f906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6b906125d5565b8015610ab85780601f10610a8d57610100808354040283529160200191610ab8565b820191906000526020600020905b815481529060010190602001808311610a9b57829003601f168201915b50505050508152602001600182018054610ad1906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610afd906125d5565b8015610b4a5780601f10610b1f57610100808354040283529160200191610b4a565b820191906000526020600020905b815481529060010190602001808311610b2d57829003601f168201915b50505050508152602001600282018054610b63906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8f906125d5565b8015610bdc5780601f10610bb157610100808354040283529160200191610bdc565b820191906000526020600020905b815481529060010190602001808311610bbf57829003601f168201915b50505050508152602001600382018054610bf5906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c21906125d5565b8015610c6e5780601f10610c4357610100808354040283529160200191610c6e565b820191906000526020600020905b815481529060010190602001808311610c5157829003601f168201915b50505050508152505090509250925092509193909250565b600080610c9288611a1f565b6040805160a06020601f8b018190040282018101909252608081018981529293509182918a908a9081908501838280828437600092019190915250505090825250602001610cdf876127c0565b8152602001610ced866127c0565b8152602001610cfb856127c0565b90526000828152600b60209081526040909120825180519192610d2392849290910190611e23565b506020828101518051805191926001850192610d429284920190611e23565b506020828101518051610d5b9260018501920190611e23565b5060408201518051610d77916002840191602090910190611e23565b5060608201518051610d93916003840191602090910190611e23565b5050506040820151805180516005840191610db391839160200190611e23565b506020828101518051610dcc9260018501920190611e23565b5060408201518051610de8916002840191602090910190611e23565b5060608201518051610e04916003840191602090910190611e23565b5050506060820151805180516009840191610e2491839160200190611e23565b506020828101518051610e3d9260018501920190611e23565b5060408201518051610e59916002840191602090910190611e23565b5060608201518051610e75916003840191602090910190611e23565b50939b9a5050505050505050505050565b6000610e9182611a85565b600101546001600160a01b031692915050565b6000610eae611ea7565b60005b6005811015610efd57848181518110610ecc57610ecc61263a565b6020026020010151828260058110610ee657610ee661263a565b602002015280610ef5816127e2565b915050610eb1565b50600084600281518110610f1357610f1361263a565b6020026020010151905084600081518110610f3057610f3061263a565b6020026020010151600114610f575760405162461bcd60e51b81526004016105139061284a565b806001600160a01b0316610f6a85610e86565b6001600160a01b031614610f905760405162461bcd60e51b8152600401610513906128c6565b6000610f9b856118ad565b905085600181518110610fb057610fb061263a565b6020026020010151604051602001610fc891906128d6565b6040516020818303038152906040528051906020012081604051602001610fef919061290d565b60405160208183030381529060405280519060200120146110225760405162461bcd60e51b815260040161051390612987565b600a546040516334baeab960e01b81526001600160a01b03909116906334baeab990611058908c908c908c908990600401612a77565b60206040518083038186803b15801561107057600080fd5b505afa158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190612ac1565b6110c45760405162461bcd60e51b815260040161051390612b12565b600193505050505b95945050505050565b6110dd611abd565b6110e76000611aec565b565b600b60205260009081526040902080548190611104906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611130906125d5565b801561117d5780601f106111525761010080835404028352916020019161117d565b820191906000526020600020905b81548152906001019060200180831161116057829003601f168201915b505050505090806001016040518060800160405290816000820180546111a2906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546111ce906125d5565b801561121b5780601f106111f05761010080835404028352916020019161121b565b820191906000526020600020905b8154815290600101906020018083116111fe57829003601f168201915b50505050508152602001600182018054611234906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611260906125d5565b80156112ad5780601f10611282576101008083540402835291602001916112ad565b820191906000526020600020905b81548152906001019060200180831161129057829003601f168201915b505050505081526020016002820180546112c6906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546112f2906125d5565b801561133f5780601f106113145761010080835404028352916020019161133f565b820191906000526020600020905b81548152906001019060200180831161132257829003601f168201915b50505050508152602001600382018054611358906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611384906125d5565b80156113d15780601f106113a6576101008083540402835291602001916113d1565b820191906000526020600020905b8154815290600101906020018083116113b457829003601f168201915b50505050508152505090806005016040518060800160405290816000820180546113fa906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611426906125d5565b80156114735780601f1061144857610100808354040283529160200191611473565b820191906000526020600020905b81548152906001019060200180831161145657829003601f168201915b5050505050815260200160018201805461148c906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546114b8906125d5565b80156115055780601f106114da57610100808354040283529160200191611505565b820191906000526020600020905b8154815290600101906020018083116114e857829003601f168201915b5050505050815260200160028201805461151e906125d5565b80601f016020809104026020016040519081016040528092919081815260200182805461154a906125d5565b80156115975780601f1061156c57610100808354040283529160200191611597565b820191906000526020600020905b81548152906001019060200180831161157a57829003601f168201915b505050505081526020016003820180546115b0906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546115dc906125d5565b80156116295780601f106115fe57610100808354040283529160200191611629565b820191906000526020600020905b81548152906001019060200180831161160c57829003601f168201915b5050505050815250509080600901604051806080016040529081600082018054611652906125d5565b80601f016020809104026020016040519081016040528092919081815260200182805461167e906125d5565b80156116cb5780601f106116a0576101008083540402835291602001916116cb565b820191906000526020600020905b8154815290600101906020018083116116ae57829003601f168201915b505050505081526020016001820180546116e4906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611710906125d5565b801561175d5780601f106117325761010080835404028352916020019161175d565b820191906000526020600020905b81548152906001019060200180831161174057829003601f168201915b50505050508152602001600282018054611776906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546117a2906125d5565b80156117ef5780601f106117c4576101008083540402835291602001916117ef565b820191906000526020600020905b8154815290600101906020018083116117d257829003601f168201915b50505050508152602001600382018054611808906125d5565b80601f0160208091040260200160405190810160405280929190818152602001828054611834906125d5565b80156118815780601f1061185657610100808354040283529160200191611881565b820191906000526020600020905b81548152906001019060200180831161186457829003601f168201915b505050505081525050905084565b6009546001600160a01b031690565b606060058054610458906125d5565b6000818152600b602052604090208054606091906118ca906125d5565b80601f01602080910402602001604051908101604052809291908181526020018280546118f6906125d5565b80156119435780601f1061191857610100808354040283529160200191611943565b820191906000526020600020905b81548152906001019060200180831161192657829003601f168201915b50505050509050919050565b606061195a82611a85565b50600061197260408051602081019091526000815290565b8051909150156119b05780611988846020611b3e565b604051602001611999929190612b22565b604051602081830303815290604052915050919050565b5050604080516020810190915260008152919050565b6119ce611abd565b6001600160a01b0381166119f45760405162461bcd60e51b815260040161051390612b7d565b6119fd81611aec565b50565b6000611a0b82611a85565b60010154600160a01b900460ff1692915050565b600654611a2e82826001611cb0565b7f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe8282604051611a5f929190612b8d565b60405180910390a1600160066000828254611a7a9190612ba8565b909155509092915050565b600081815260208190526040812060018101546001600160a01b03166104435760405162461bcd60e51b81526004016105139061262a565b33611ac661188f565b6001600160a01b0316146110e75760405162461bcd60e51b815260040161051390612bf2565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000611b4d836002612c02565b611b58906002612ba8565b6001600160401b03811115611b6f57611b6f6122d3565b6040519080825280601f01601f191660200182016040528015611b99576020820181803683370190505b509050600360fc1b81600081518110611bb457611bb461263a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611be357611be361263a565b60200101906001600160f81b031916908160001a9053506000611c07846002612c02565b611c12906001612ba8565b90505b6001811115611c8a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c4657611c4661263a565b1a60f81b828281518110611c5c57611c5c61263a565b60200101906001600160f81b031916908160001a90535060049490941c93611c8381612c21565b9050611c15565b508315611ca95760405162461bcd60e51b815260040161051390612c6a565b9392505050565b6000828152602081905260409020600101546001600160a01b031615611ce85760405162461bcd60e51b815260040161051390612cae565b6001600160a01b038316600090815260016020526040902054611d1e57600160076000828254611d189190612ba8565b90915550505b604080516060810182523381526001600160a01b0385811660208084018281528615801586880190815260008a8152808552888120975188549088166001600160a01b031990911617885592516001978801805492511515600160a01b026001600160a81b03199093169190971617179094559182528381528482208054600283528684208985528352958320869055848252938501845592815291909120909101839055611df6576001600160a01b0383166000908152600360205260408120805460019290611df0908490612ba8565b90915550505b505050565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b828054611e2f906125d5565b90600052602060002090601f016020900481019282611e515760008555611e97565b82601f10611e6a57805160ff1916838001178555611e97565b82800160010185558215611e97579182015b82811115611e97578251825591602001919060010190611e7c565b50611ea3929150611ec5565b5090565b6040518060a001604052806005906020820280368337509192915050565b5b80821115611ea35760008155600101611ec6565b6001600160e01b031981165b81146119fd57600080fd5b803561044381611eda565b600060208284031215611f1157611f11600080fd5b6000611f1d8484611ef1565b949350505050565b8015155b82525050565b602081016104438284611f25565b60005b83811015611f58578181015183820152602001611f40565b83811115611f67576000848401525b50505050565b601f01601f191690565b6000611f81825190565b808452602084019350611f98818560208601611f3d565b611fa181611f6d565b9093019392505050565b60208082528101611ca98184611f77565b80611f29565b602081016104438284611fbc565b6001600160a01b031690565b600061044382611fd0565b611ee681611fdc565b803561044381611fe7565b80611ee6565b803561044381611ffb565b6000806040838503121561202257612022600080fd5b600061202e8585611ff0565b925050602061203f85828601612001565b9150509250929050565b60006020828403121561205e5761205e600080fd5b6000611f1d8484612001565b80516080808452600091908401906120828282611f77565b9150506020830151848203602086015261209c8282611f77565b915050604083015184820360408601526120b68282611f77565b915050606083015184820360608601526110cc8282611f77565b606080825281016120e1818661206a565b905081810360208301526120f5818561206a565b905081810360408301526110cc818461206a565b60006020828403121561211e5761211e600080fd5b6000611f1d8484611ff0565b60008083601f84011261213f5761213f600080fd5b5081356001600160401b0381111561215957612159600080fd5b60208301915083600182028301111561217457612174600080fd5b9250929050565b60006080828403121561219057612190600080fd5b50919050565b60008060008060008060a087890312156121b2576121b2600080fd5b60006121be8989611ff0565b96505060208701356001600160401b038111156121dd576121dd600080fd5b6121e989828a0161212a565b955095505060408701356001600160401b0381111561220a5761220a600080fd5b61221689828a0161217b565b93505060608701356001600160401b0381111561223557612235600080fd5b61224189828a0161217b565b92505060808701356001600160401b0381111561226057612260600080fd5b61226c89828a0161217b565b9150509295509295509295565b600061044361228a61025084611fd0565b611fd0565b600061044382612279565b60006104438261228f565b611f298161229a565b6020810161044382846122a5565b611f2981611fdc565b6020810161044382846122bc565b634e487b7160e01b600052604160045260246000fd5b6122f282611f6d565b81018181106001600160401b038211171561230f5761230f6122d3565b6040525050565b600061232160405190565b905061232d82826122e9565b919050565b60006001600160401b0382111561234b5761234b6122d3565b5060200290565b600061236561236084612332565b612316565b9050806020840283018581111561237e5761237e600080fd5b835b818110156123a257806123938882612001565b84525060209283019201612380565b5050509392505050565b600082601f8301126123c0576123c0600080fd5b6002611f1d848285612352565b60006123db61236084612332565b905080604084028301858111156123f4576123f4600080fd5b835b818110156123a2578061240988826123ac565b8452506020909201916040016123f6565b600082601f83011261242e5761242e600080fd5b6002611f1d8482856123cd565b60006001600160401b03821115612454576124546122d3565b5060209081020190565b600061246c6123608461243b565b8381529050602080820190840283018581111561248b5761248b600080fd5b835b818110156123a257806124a08882612001565b8452506020928301920161248d565b600082601f8301126124c3576124c3600080fd5b8135611f1d84826020860161245e565b600080600080600061014086880312156124ef576124ef600080fd5b60006124fb88886123ac565b955050604061250c8882890161241a565b94505060c061251d888289016123ac565b9350506101008601356001600160401b0381111561253d5761253d600080fd5b612549888289016124af565b92505061012061255b88828901612001565b9150509295509295909350565b608080825281016125798187611f77565b9050818103602083015261258d818661206a565b905081810360408301526125a1818561206a565b905081810360608301526125b5818461206a565b9695505050505050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806125e957607f821691505b60208210811415612190576121906125bf565b6014815260006020820173151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b815291505b5060200190565b60208082528101610443816125fc565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b03821115612669576126696122d3565b61267282611f6d565b60200192915050565b82818337506000910152565b600061269561236084612650565b9050828152602081018484840111156126b0576126b0600080fd5b6126bb84828561267b565b509392505050565b600082601f8301126126d7576126d7600080fd5b8135611f1d848260208601612687565b6000608082840312156126fc576126fc600080fd5b6127066080612316565b905081356001600160401b0381111561272157612721600080fd5b61272d848285016126c3565b82525060208201356001600160401b0381111561274c5761274c600080fd5b612758848285016126c3565b60208301525060408201356001600160401b0381111561277a5761277a600080fd5b612786848285016126c3565b60408301525060608201356001600160401b038111156127a8576127a8600080fd5b6127b4848285016126c3565b60608301525092915050565b600061044336836126e7565b634e487b7160e01b600052601160045260246000fd5b60006000198214156127f6576127f66127cc565b5060010190565b602d81526000602082017f54686520636c61696d20646f65736e277420736174697366792074686520717581526c32b93c9031b7b73234ba34b7b760991b602082015291505b5060400190565b60208082528101610443816127fd565b604681526000602082017f5468652053425420646f65736e27742062656c6f6e6720746f2074686520616481527f6472657373207468617420697320747279696e6720746f20636c61696d20746860208201526532903637b0b760d11b604082015291505b5060600190565b602080825281016104438161285a565b60006128e28284611fbc565b50602001919050565b60006128f5825190565b612903818560208601611f3d565b9290920192915050565b6000611ca982846128eb565b604b81526000602082017f54686520726f6f74206f6620746865204d65726b6c652054726565277320646181527f746120646f65736e2774206d617463682074686520726f6f742073746f72656460208201526a081a5b881d1a194814d09560aa1b604082015291506128bf565b6020808252810161044381612919565b60006129a38383611fbc565b505060200190565b6002818060005b838110156129d75781516129c68782612997565b9650602083019250506001016129b2565b505050505050565b6002818060005b838110156129d75781516129fa8782612997565b9650602083019250506001016129e6565b6000612a1783836129df565b505060400190565b6002818060005b838110156129d7578151612a3a8782612a0b565b965060208301925050600101612a26565b6005818060005b838110156129d7578151612a668782612997565b965060208301925050600101612a52565b6101a08101612a8682876129ab565b612a936040830186612a1f565b612aa060c08301856129ab565b6110cc610100830184612a4b565b801515611ee6565b805161044381612aae565b600060208284031215612ad657612ad6600080fd5b6000611f1d8484612ab6565b6019815260006020820178141c9bdbd9881d995c9a599a58d85d1a5bdb8819985a5b1959603a1b81529150612623565b6020808252810161044381612ae2565b6000612b2e82856128eb565b9150611f1d82846128eb565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612843565b6020808252810161044381612b3a565b60408101612b9b82856122bc565b611ca96020830184611fbc565b60008219821115612bbb57612bbb6127cc565b500190565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612623565b6020808252810161044381612bc0565b6000816000190483118215151615612c1c57612c1c6127cc565b500290565b600081612c3057612c306127cc565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000612623565b6020808252810161044381612c38565b601d81526000602082017f43616e6e6f74206d696e7420616e2061737369676e656420746f6b656e00000081529150612623565b6020808252810161044381612c7a56fea26469706673582212208dd6fc525b683a7c7108c9fa79f840844a96a9f7275c156ab3f68085333010bc64736f6c63430008080033",
  "devdoc": {
    "author": "Miquel A. Cabot",
    "details": "Inherits from the SSBT contract",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "owner": "Address for whom to query the balance"
        },
        "returns": {
          "_0": "Number of tokens owned by `owner`"
        }
      },
      "constructor": {
        "details": "Creates a new ZKP SBT, inheriting from the SBT contract.",
        "params": {
          "admin": "Administrator of the smart contract",
          "name": "Name of the token",
          "symbol": "Symbol of the token",
          "verifier": "Verifier smart contract"
        }
      },
      "emittedCount()": {
        "returns": {
          "_0": "emittedCount Number of tokens emitted"
        }
      },
      "getEncryptedData(uint256)": {
        "params": {
          "tokenId": "The SBT ID"
        },
        "returns": {
          "_0": "The encrypted data with the public key of the owner of the SBT"
        }
      },
      "getRoot(uint256)": {
        "params": {
          "tokenId": "The SBT ID"
        },
        "returns": {
          "_0": "The root of the Merkle Tree's data without encryption, used to verify the data"
        }
      },
      "getVerifier()": {
        "returns": {
          "_0": "The verifier smart contract"
        }
      },
      "hasValid(address)": {
        "params": {
          "owner": "Address for whom to check the ownership"
        },
        "returns": {
          "_0": "True if `owner` has a valid token, false otherwise"
        }
      },
      "holdersCount()": {
        "returns": {
          "_0": "holdersCount Number of token holders"
        }
      },
      "isValid(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "True if the token is valid, false otherwise"
        }
      },
      "mint(address,bytes,(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes))": {
        "details": "The caller must have the MINTER role",
        "params": {
          "encryptedCreditScore": "Encrypted credit score",
          "encryptedIncome": "Encrypted income",
          "encryptedReportDate": "Encrypted report date",
          "root": "Root of the Merkle Tree's data without encryption, used to verify the data",
          "to": "The address to mint the SBT to"
        },
        "returns": {
          "_0": "The SBT ID of the newly minted SBT"
        }
      },
      "name()": {
        "returns": {
          "_0": "Descriptive name of the tokens in this contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "Address of the owner of `tokenId`"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "returns": {
          "_0": "An abbreviated name of the tokens in this contract"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "Index of the token"
        },
        "returns": {
          "_0": "tokenId of the token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "Index of the token",
          "owner": "Address for whom to get the token"
        },
        "returns": {
          "_0": "tokenId of the token"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "URI for the token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ZKP SBT",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Minted(address,uint256)": {
        "notice": "Event emitted when a token `tokenId` is minted for `owner`"
      },
      "Revoked(address,uint256)": {
        "notice": "Event emitted when token `tokenId` of `owner` is revoked"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Count all tokens assigned to an owner"
      },
      "constructor": {
        "notice": "Creates a new ZKP SBT"
      },
      "getEncryptedData(uint256)": {
        "notice": "Returns the encrypted data with the public key of the owner of the SBT"
      },
      "getRoot(uint256)": {
        "notice": "Returns the root of the Merkle Tree's data without encryption, used to verify the data"
      },
      "getVerifier()": {
        "notice": "Returns the verifier smart contract"
      },
      "hasValid(address)": {
        "notice": "Check if an address owns a valid token in the contract"
      },
      "isValid(uint256)": {
        "notice": "Check if a token hasn't been revoked"
      },
      "mint(address,bytes,(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes))": {
        "notice": "Mints a new SBT"
      },
      "ownerOf(uint256)": {
        "notice": "Get owner of a token"
      },
      "tokenByIndex(uint256)": {
        "notice": "Get a tokenId by it's index, where 0 <= index < total()"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Get the tokenId of a token using its position in the owner's list"
      },
      "tokenURI(uint256)": {
        "notice": "URI to query to get the token's metadata"
      }
    },
    "notice": "Soulbound token implementing ZKP",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1542,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Token)1537_storage)"
      },
      {
        "astId": 1547,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_indexedTokenIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1553,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_tokenIdIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1557,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_numberOfValidTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1559,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1561,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1563,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_emittedCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1565,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_holdersCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1567,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_creator",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1246,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_verifier",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IVerifier)1238"
      },
      {
        "astId": 1272,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "sbtData",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(SBTData)1267_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IVerifier)1238": {
        "encoding": "inplace",
        "label": "contract IVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(SBTData)1267_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ZKSBT.SBTData)",
        "numberOfBytes": "32",
        "value": "t_struct(SBTData)1267_storage"
      },
      "t_mapping(t_uint256,t_struct(Token)1537_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC4671.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)1537_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(EncryptedData)1255_storage": {
        "encoding": "inplace",
        "label": "struct ZKSBT.EncryptedData",
        "members": [
          {
            "astId": 1248,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "iv",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1250,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "ephemPublicKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1252,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "ciphertext",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1254,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "mac",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SBTData)1267_storage": {
        "encoding": "inplace",
        "label": "struct ZKSBT.SBTData",
        "members": [
          {
            "astId": 1257,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1260,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "encryptedCreditScore",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(EncryptedData)1255_storage"
          },
          {
            "astId": 1263,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "encryptedIncome",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(EncryptedData)1255_storage"
          },
          {
            "astId": 1266,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "encryptedReportDate",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(EncryptedData)1255_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Token)1537_storage": {
        "encoding": "inplace",
        "label": "struct ERC4671.Token",
        "members": [
          {
            "astId": 1532,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "issuer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1534,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1536,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "valid",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}