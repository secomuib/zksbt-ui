{
  "address": "0xd5775612e31028D41E991395b361b5a58b53A336",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IVerifier",
          "name": "verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emittedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEncryptedData",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVerifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "hasValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holdersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "root",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "encryptedData",
          "type": "bytes[]"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVerifier",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "setVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "proof",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "publicValues",
          "type": "uint256[]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1fdaff6a4ae58eb6557cb9066fc11ee4b66bf21bea60933ba091feaedd04e7d",
  "receipt": {
    "to": null,
    "from": "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "contractAddress": "0xd5775612e31028D41E991395b361b5a58b53A336",
    "transactionIndex": 58,
    "gasUsed": "1895122",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000840000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000020000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000080000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000400000000000",
    "blockHash": "0xa36c54d1781b07f035d7edeeb14c02ca824cf0f09358a0e0dfe967840ee1f35f",
    "transactionHash": "0xc1fdaff6a4ae58eb6557cb9066fc11ee4b66bf21bea60933ba091feaedd04e7d",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 10093547,
        "transactionHash": "0xc1fdaff6a4ae58eb6557cb9066fc11ee4b66bf21bea60933ba091feaedd04e7d",
        "address": "0xd5775612e31028D41E991395b361b5a58b53A336",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28"
        ],
        "data": "0x",
        "logIndex": 158,
        "blockHash": "0xa36c54d1781b07f035d7edeeb14c02ca824cf0f09358a0e0dfe967840ee1f35f"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 10093547,
        "transactionHash": "0xc1fdaff6a4ae58eb6557cb9066fc11ee4b66bf21bea60933ba091feaedd04e7d",
        "address": "0xd5775612e31028D41E991395b361b5a58b53A336",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28"
        ],
        "data": "0x",
        "logIndex": 159,
        "blockHash": "0xa36c54d1781b07f035d7edeeb14c02ca824cf0f09358a0e0dfe967840ee1f35f"
      }
    ],
    "blockNumber": 10093547,
    "cumulativeGasUsed": "14179729",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "ZKP SBT",
    "ZKSBT",
    "0xb98CED7Bedf001FC8303fa01aC402E390C093B3C"
  ],
  "numDeployments": 1,
  "solcInputHash": "0511e6ef6b7c03e3bdcf26a3b9c73958",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IVerifier\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emittedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEncryptedData\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVerifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"root\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"encryptedData\",\"type\":\"bytes[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"proof\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"publicValues\",\"type\":\"uint256[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Miquel A. Cabot\",\"details\":\"Inherits from the SSBT contract\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"owner\":\"Address for whom to query the balance\"},\"returns\":{\"_0\":\"Number of tokens owned by `owner`\"}},\"constructor\":{\"details\":\"Creates a new ZKP SBT, inheriting from the SBT contract.\",\"params\":{\"admin\":\"Administrator of the smart contract\",\"name\":\"Name of the token\",\"symbol\":\"Symbol of the token\",\"verifier\":\"Verifier smart contract\"}},\"emittedCount()\":{\"returns\":{\"_0\":\"emittedCount Number of tokens emitted\"}},\"getEncryptedData(uint256)\":{\"params\":{\"tokenId\":\"The SBT ID\"},\"returns\":{\"_0\":\"The encrypted data with the public key of the owner of the SBT\"}},\"getRoot(uint256)\":{\"params\":{\"tokenId\":\"The SBT ID\"},\"returns\":{\"_0\":\"The root of the Merkle Tree's data without encryption, used to verify the data\"}},\"getVerifier()\":{\"returns\":{\"_0\":\"The verifier smart contract\"}},\"hasValid(address)\":{\"params\":{\"owner\":\"Address for whom to check the ownership\"},\"returns\":{\"_0\":\"True if `owner` has a valid token, false otherwise\"}},\"holdersCount()\":{\"returns\":{\"_0\":\"holdersCount Number of token holders\"}},\"isValid(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"True if the token is valid, false otherwise\"}},\"mint(address,bytes,bytes[])\":{\"details\":\"The caller must have the MINTER role\",\"params\":{\"encryptedData\":\"Encrypted data\",\"root\":\"Root of the Merkle Tree's data without encryption, used to verify the data\",\"to\":\"The address to mint the SBT to\"},\"returns\":{\"_0\":\"The SBT ID of the newly minted SBT\"}},\"name()\":{\"returns\":{\"_0\":\"Descriptive name of the tokens in this contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"Address of the owner of `tokenId`\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setVerifier(address)\":{\"details\":\"The caller must have the OWNER role\",\"params\":{\"verifier\":\"Verifier smart contract\"}},\"symbol()\":{\"returns\":{\"_0\":\"An abbreviated name of the tokens in this contract\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"Index of the token\"},\"returns\":{\"_0\":\"tokenId of the token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"Index of the token\",\"owner\":\"Address for whom to get the token\"},\"returns\":{\"_0\":\"tokenId of the token\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"URI for the token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ZKP SBT\",\"version\":1},\"userdoc\":{\"events\":{\"Minted(address,uint256)\":{\"notice\":\"Event emitted when a token `tokenId` is minted for `owner`\"},\"Revoked(address,uint256)\":{\"notice\":\"Event emitted when token `tokenId` of `owner` is revoked\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Count all tokens assigned to an owner\"},\"constructor\":{\"notice\":\"Creates a new ZKP SBT\"},\"getEncryptedData(uint256)\":{\"notice\":\"Returns the encrypted data with the public key of the owner of the SBT\"},\"getRoot(uint256)\":{\"notice\":\"Returns the root of the Merkle Tree's data without encryption, used to verify the data\"},\"getVerifier()\":{\"notice\":\"Returns the verifier smart contract\"},\"hasValid(address)\":{\"notice\":\"Check if an address owns a valid token in the contract\"},\"isValid(uint256)\":{\"notice\":\"Check if a token hasn't been revoked\"},\"mint(address,bytes,bytes[])\":{\"notice\":\"Mints a new SBT\"},\"ownerOf(uint256)\":{\"notice\":\"Get owner of a token\"},\"setVerifier(address)\":{\"notice\":\"Sets the verifier smart contract\"},\"tokenByIndex(uint256)\":{\"notice\":\"Get a tokenId by it's index, where 0 <= index < total()\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Get the tokenId of a token using its position in the owner's list\"},\"tokenURI(uint256)\":{\"notice\":\"URI to query to get the token's metadata\"}},\"notice\":\"Soulbound token implementing ZKP\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZKSBT.sol\":\"ZKSBT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/IZKSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IZKSBT {\\n    function getRoot(uint256 tokenId) external view returns (bytes memory);\\n\\n    function getEncryptedData(\\n        uint256 tokenId\\n    ) external view returns (bytes[] memory);\\n\\n    function mint(\\n        address to,\\n        bytes memory root,\\n        bytes[] memory encryptedData\\n    ) external payable returns (uint256);\\n\\n    function verifyProof(\\n        uint256 tokenId,\\n        uint[] memory proof,\\n        uint256[] memory publicValues\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dd0d025bd4db7f21e94b70da174590191ee501b387ca92b3541f010f336a69a\",\"license\":\"MIT\"},\"contracts/ZKSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./eip-4671/ERC4671.sol\\\";\\nimport \\\"./IZKSBT.sol\\\";\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint[2] memory a,\\n        uint[2][2] memory b,\\n        uint[2] memory c,\\n        uint[6] memory input\\n    ) external view returns (bool);\\n}\\n\\n/// @title ZKP SBT\\n/// @author Miquel A. Cabot\\n/// @notice Soulbound token implementing ZKP\\n/// @dev Inherits from the SSBT contract\\ncontract ZKSBT is IZKSBT, ERC4671, Ownable {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    IVerifier internal _verifier;\\n\\n    // Struct to store the encrypted data with the public key of the owner of the SBT\\n    struct SBTData {\\n        bytes root; // root of the Merkle Tree's data without encryption, used to verify the data\\n        // encrypted data with the public key of the owner of the SBT\\n        bytes[] encryptedData;\\n    }\\n\\n    // tokenId => SBTData\\n    mapping(uint256 => SBTData) internal sbtData;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new ZKP SBT\\n    /// @dev Creates a new ZKP SBT, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param verifier Verifier smart contract\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        IVerifier verifier\\n    ) ERC4671(name, symbol) {\\n        Ownable.transferOwnership(admin);\\n        _verifier = verifier;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the verifier smart contract\\n    /// @dev The caller must have the OWNER role\\n    /// @param verifier Verifier smart contract\\n    function setVerifier(IVerifier verifier) external onlyOwner {\\n        _verifier = verifier;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param to The address to mint the SBT to\\n    /// @param root Root of the Merkle Tree's data without encryption, used to verify the data\\n    /// @param encryptedData Encrypted data\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address to,\\n        bytes calldata root,\\n        bytes[] calldata encryptedData\\n    ) external payable virtual override returns (uint256) {\\n        uint256 tokenId = _mint(to);\\n\\n        sbtData[tokenId] = SBTData({root: root, encryptedData: encryptedData});\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the verifier smart contract\\n    /// @return The verifier smart contract\\n    function getVerifier() external view returns (IVerifier) {\\n        return _verifier;\\n    }\\n\\n    /// @notice Returns the root of the Merkle Tree's data without encryption, used to verify the data\\n    /// @param tokenId The SBT ID\\n    /// @return The root of the Merkle Tree's data without encryption, used to verify the data\\n    function getRoot(\\n        uint256 tokenId\\n    ) public view override returns (bytes memory) {\\n        return sbtData[tokenId].root;\\n    }\\n\\n    /// @notice Returns the encrypted data with the public key of the owner of the SBT\\n    /// @param tokenId The SBT ID\\n    /// @return The encrypted data with the public key of the owner of the SBT\\n    function getEncryptedData(\\n        uint256 tokenId\\n    ) external view override returns (bytes[] memory) {\\n        return sbtData[tokenId].encryptedData;\\n    }\\n\\n    // @notice verifies the validity of the proof, and make further verifications on the public\\n    // input of the circuit\\n    // @param tokenId The SBT ID\\n    // @param proof Proof generated by the circuit\\n    // @param publicValues Public input of the circuit\\n    // @return True if the proof is valid, false otherwise\\n    function verifyProof(\\n        uint256 tokenId,\\n        uint[] memory proof,\\n        uint[] memory publicValues\\n    ) external view override returns (bool) {\\n        address owner = address(uint160(publicValues[3]));\\n\\n        require(\\n            publicValues[0] ==\\n                0x0000000000000000000000000000000000000000000000000000000000000001,\\n            \\\"The claim doesn't satisfy the query condition\\\"\\n        );\\n\\n        require(\\n            ownerOf(tokenId) == owner,\\n            \\\"The SBT doesn't belong to the address that is trying to claim the loan\\\"\\n        );\\n\\n        bytes memory root = getRoot(tokenId);\\n        require(\\n            keccak256(abi.encodePacked(root)) ==\\n                keccak256(abi.encodePacked(publicValues[2])),\\n            \\\"The root of the Merkle Tree's data doesn't match the root stored in the SBT\\\"\\n        );\\n\\n        // Convert the proof and the public values to the format expected by the verifier\\n        uint[2] memory a = [proof[0], proof[1]];\\n        uint[2][2] memory b = [[proof[2], proof[3]], [proof[4], proof[5]]];\\n        uint[2] memory c = [proof[6], proof[7]];\\n        uint[6] memory p = [\\n            publicValues[0],\\n            publicValues[1],\\n            publicValues[2],\\n            publicValues[3],\\n            publicValues[4],\\n            publicValues[5]\\n        ];\\n\\n        // Verify the proof\\n        require(_verifier.verifyProof(a, b, c, p), \\\"Proof verification failed\\\");\\n\\n        return true;\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0xf84db8e8c36f38902636bd9f1af98c9812e0daa790bec2bd5fc3563f43d48119\",\"license\":\"MIT\"},\"contracts/eip-4671/ERC4671.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./IERC4671.sol\\\";\\nimport \\\"./IERC4671Metadata.sol\\\";\\nimport \\\"./IERC4671Enumerable.sol\\\";\\n\\nabstract contract ERC4671 is\\n    IERC4671,\\n    IERC4671Metadata,\\n    IERC4671Enumerable,\\n    ERC165\\n{\\n    // Token data\\n    struct Token {\\n        address issuer;\\n        address owner;\\n        bool valid;\\n    }\\n\\n    // Mapping from tokenId to token\\n    mapping(uint256 => Token) private _tokens;\\n\\n    // Mapping from owner to token ids\\n    mapping(address => uint256[]) private _indexedTokenIds;\\n\\n    // Mapping from token id to index\\n    mapping(address => mapping(uint256 => uint256)) private _tokenIdIndex;\\n\\n    // Mapping from owner to number of valid tokens\\n    mapping(address => uint256) private _numberOfValidTokens;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Total number of tokens emitted\\n    uint256 private _emittedCount;\\n\\n    // Total number of token holders\\n    uint256 private _holdersCount;\\n\\n    // Contract creator\\n    address private _creator;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _creator = msg.sender;\\n    }\\n\\n    /// @notice Count all tokens assigned to an owner\\n    /// @param owner Address for whom to query the balance\\n    /// @return Number of tokens owned by `owner`\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        return _indexedTokenIds[owner].length;\\n    }\\n\\n    /// @notice Get owner of a token\\n    /// @param tokenId Identifier of the token\\n    /// @return Address of the owner of `tokenId`\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        return _getTokenOrRevert(tokenId).owner;\\n    }\\n\\n    /// @notice Check if a token hasn't been revoked\\n    /// @param tokenId Identifier of the token\\n    /// @return True if the token is valid, false otherwise\\n    function isValid(\\n        uint256 tokenId\\n    ) public view virtual override returns (bool) {\\n        return _getTokenOrRevert(tokenId).valid;\\n    }\\n\\n    /// @notice Check if an address owns a valid token in the contract\\n    /// @param owner Address for whom to check the ownership\\n    /// @return True if `owner` has a valid token, false otherwise\\n    function hasValid(\\n        address owner\\n    ) public view virtual override returns (bool) {\\n        return _numberOfValidTokens[owner] > 0;\\n    }\\n\\n    /// @return Descriptive name of the tokens in this contract\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @return An abbreviated name of the tokens in this contract\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @notice URI to query to get the token's metadata\\n    /// @param tokenId Identifier of the token\\n    /// @return URI for the token\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _getTokenOrRevert(tokenId);\\n        bytes memory baseURI = bytes(_baseURI());\\n        if (baseURI.length > 0) {\\n            return\\n                string(\\n                    abi.encodePacked(baseURI, Strings.toHexString(tokenId, 32))\\n                );\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    /// @return emittedCount Number of tokens emitted\\n    function emittedCount() public view override returns (uint256) {\\n        return _emittedCount;\\n    }\\n\\n    /// @return holdersCount Number of token holders\\n    function holdersCount() public view override returns (uint256) {\\n        return _holdersCount;\\n    }\\n\\n    /// @notice Get the tokenId of a token using its position in the owner's list\\n    /// @param owner Address for whom to get the token\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        uint256[] storage ids = _indexedTokenIds[owner];\\n        require(index < ids.length, \\\"Token does not exist\\\");\\n        return ids[index];\\n    }\\n\\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenByIndex(\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        return index;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC4671).interfaceId ||\\n            interfaceId == type(IERC4671Metadata).interfaceId ||\\n            interfaceId == type(IERC4671Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Prefix for all calls to tokenURI\\n    /// @return Common base URI for all token\\n    function _baseURI() internal pure virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @notice Mark the token as revoked\\n    /// @param tokenId Identifier of the token\\n    function _revoke(uint256 tokenId) internal virtual {\\n        Token storage token = _getTokenOrRevert(tokenId);\\n        require(token.valid, \\\"Token is already invalid\\\");\\n        token.valid = false;\\n        assert(_numberOfValidTokens[token.owner] > 0);\\n        _numberOfValidTokens[token.owner] -= 1;\\n        emit Revoked(token.owner, tokenId);\\n    }\\n\\n    /// @notice Mint a new token\\n    /// @param owner Address for whom to assign the token\\n    /// @return tokenId Identifier of the minted token\\n    function _mint(address owner) internal virtual returns (uint256 tokenId) {\\n        tokenId = _emittedCount;\\n        _mintUnsafe(owner, tokenId, true);\\n        emit Minted(owner, tokenId);\\n        _emittedCount += 1;\\n    }\\n\\n    /// @notice Mint a given tokenId\\n    /// @param owner Address for whom to assign the token\\n    /// @param tokenId Token identifier to assign to the owner\\n    /// @param valid Boolean to assert of the validity of the token\\n    function _mintUnsafe(address owner, uint256 tokenId, bool valid) internal {\\n        require(\\n            _tokens[tokenId].owner == address(0),\\n            \\\"Cannot mint an assigned token\\\"\\n        );\\n        if (_indexedTokenIds[owner].length == 0) {\\n            _holdersCount += 1;\\n        }\\n        _tokens[tokenId] = Token(msg.sender, owner, valid);\\n        _tokenIdIndex[owner][tokenId] = _indexedTokenIds[owner].length;\\n        _indexedTokenIds[owner].push(tokenId);\\n        if (valid) {\\n            _numberOfValidTokens[owner] += 1;\\n        }\\n    }\\n\\n    /// @return True if the caller is the contract's creator, false otherwise\\n    function _isCreator() internal view virtual returns (bool) {\\n        return msg.sender == _creator;\\n    }\\n\\n    /// @notice Retrieve a token or revert if it does not exist\\n    /// @param tokenId Identifier of the token\\n    /// @return The Token struct\\n    function _getTokenOrRevert(\\n        uint256 tokenId\\n    ) internal view virtual returns (Token storage) {\\n        Token storage token = _tokens[tokenId];\\n        require(token.owner != address(0), \\\"Token does not exist\\\");\\n        return token;\\n    }\\n\\n    /// @notice Remove a token\\n    /// @param tokenId Token identifier to remove\\n    function _removeToken(uint256 tokenId) internal virtual {\\n        Token storage token = _getTokenOrRevert(tokenId);\\n        _removeFromUnorderedArray(\\n            _indexedTokenIds[token.owner],\\n            _tokenIdIndex[token.owner][tokenId]\\n        );\\n        if (_indexedTokenIds[token.owner].length == 0) {\\n            assert(_holdersCount > 0);\\n            _holdersCount -= 1;\\n        }\\n        if (token.valid) {\\n            assert(_numberOfValidTokens[token.owner] > 0);\\n            _numberOfValidTokens[token.owner] -= 1;\\n        }\\n        delete _tokens[tokenId];\\n    }\\n\\n    /// @notice Removes an entry in an array by its index\\n    /// @param array Array for which to remove the entry\\n    /// @param index Index of the entry to remove\\n    function _removeFromUnorderedArray(\\n        uint256[] storage array,\\n        uint256 index\\n    ) internal {\\n        require(index < array.length, \\\"Trying to delete out of bound index\\\");\\n        if (index != array.length - 1) {\\n            array[index] = array[array.length - 1];\\n        }\\n        array.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x974dce4b9fe56f149ab345726c3d846a5a3ba9ac2033686b6ac6d13b3640bf1a\",\"license\":\"CC0-1.0\"},\"contracts/eip-4671/IERC4671.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC4671 is IERC165 {\\n    /// Event emitted when a token `tokenId` is minted for `owner`\\n    event Minted(address owner, uint256 tokenId);\\n\\n    /// Event emitted when token `tokenId` of `owner` is revoked\\n    event Revoked(address owner, uint256 tokenId);\\n\\n    /// @notice Count all tokens assigned to an owner\\n    /// @param owner Address for whom to query the balance\\n    /// @return Number of tokens owned by `owner`\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @notice Get owner of a token\\n    /// @param tokenId Identifier of the token\\n    /// @return Address of the owner of `tokenId`\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /// @notice Check if a token hasn't been revoked\\n    /// @param tokenId Identifier of the token\\n    /// @return True if the token is valid, false otherwise\\n    function isValid(uint256 tokenId) external view returns (bool);\\n\\n    /// @notice Check if an address owns a valid token in the contract\\n    /// @param owner Address for whom to check the ownership\\n    /// @return True if `owner` has a valid token, false otherwise\\n    function hasValid(address owner) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70902b4d656e29301c5f89d49fc798b60f476df0ce80400a68a9305173a3ede\",\"license\":\"CC0-1.0\"},\"contracts/eip-4671/IERC4671Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./IERC4671.sol\\\";\\n\\ninterface IERC4671Enumerable is IERC4671 {\\n    /// @return emittedCount Number of tokens emitted\\n    function emittedCount() external view returns (uint256);\\n\\n    /// @return holdersCount Number of token holders\\n    function holdersCount() external view returns (uint256);\\n\\n    /// @notice Get the tokenId of a token using its position in the owner's list\\n    /// @param owner Address for whom to get the token\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdd3ca68e9e0ec097a090aec007a1727db8025472bbf5a6c7e08c4c7bd341dd1d\",\"license\":\"CC0-1.0\"},\"contracts/eip-4671/IERC4671Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./IERC4671.sol\\\";\\n\\ninterface IERC4671Metadata is IERC4671 {\\n    /// @return Descriptive name of the tokens in this contract\\n    function name() external view returns (string memory);\\n\\n    /// @return An abbreviated name of the tokens in this contract\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice URI to query to get the token's metadata\\n    /// @param tokenId Identifier of the token\\n    /// @return URI for the token\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2f432de22b5497e44aa37966ac8b92eb3f718a995c88723d6ae183b4fe917aa9\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200250d3803806200250d833981016040819052620000349162000321565b82826004620000448382620004ed565b506005620000538282620004ed565b5050600880546001600160a01b03191633179055506200007a620000743390565b620000ba565b62000090846200010c60201b62000c2c1760201c565b600a80546001600160a01b0319166001600160a01b03929092169190911790555062000642915050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200011662000156565b6001600160a01b038116620001485760405162461bcd60e51b81526004016200013f90620005bc565b60405180910390fd5b6200015381620000ba565b50565b6009546001600160a01b03163314620001835760405162461bcd60e51b81526004016200013f9062000607565b565b60006001600160a01b0382165b92915050565b620001a38162000185565b81146200015357600080fd5b8051620001928162000198565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b620001e782620001bc565b81018181106001600160401b0382111715620002075762000207620001c6565b6040525050565b60006200021a60405190565b9050620002288282620001dc565b919050565b60006001600160401b03821115620002495762000249620001c6565b6200025482620001bc565b60200192915050565b60005b838110156200027a57818101518382015260200162000260565b50506000910152565b60006200029a62000294846200022d565b6200020e565b905082815260208101848484011115620002b757620002b7600080fd5b620002c48482856200025d565b509392505050565b600082601f830112620002e257620002e2600080fd5b8151620002f484826020860162000283565b949350505050565b6000620001928262000185565b620001a381620002fc565b8051620001928162000309565b600080600080608085870312156200033c576200033c600080fd5b60006200034a8787620001af565b94505060208501516001600160401b038111156200036b576200036b600080fd5b6200037987828801620002cc565b93505060408501516001600160401b038111156200039a576200039a600080fd5b620003a887828801620002cc565b9250506060620003bb8782880162000314565b91505092959194509250565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620003f257607f821691505b602082108103620004075762000407620003c7565b50919050565b6000620001926200041b8381565b90565b62000429836200040d565b815460001960089490940293841b1916921b91909117905550565b6000620004538184846200041e565b505050565b8181101562000477576200046e60008262000444565b60010162000458565b5050565b601f82111562000453576000818152602090206020601f85010481016020851015620004a45750805b620004b86020601f86010483018262000458565b5050505050565b6000196008929092029190911c191690565b6000620004df8383620004bf565b600290930290921792915050565b81516001600160401b03811115620005095762000509620001c6565b620005158254620003dd565b620005228282856200047b565b6020601f831160018114620005555760008415620005405750858201515b6200054c8582620004d1565b865550620005b4565b600085815260208120601f198616915b8281101562000587578885015182556020948501946001909201910162000565565b86831015620005a75784890151620005a3601f891682620004bf565b8355505b6001600288020188555050505b505050505050565b602080825281016200019281602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408301526060820162000192565b611ebb80620006526000396000f3fe6080604052600436106100fa5760003560e01c806301ffc9a7146100ff57806306fdde031461013557806326019c181461015757806329f325f7146101755780632f745c59146101885780633ec0b0bc146101a857806343945512146101d557806346657fe91461020d5780634f6ccce7146102335780635437988d146102515780636352211e146102735780636b4ed21b146102a057806370a08231146102b5578063715018a6146102eb5780638da5cb5b1461030057806395d89b4114610315578063980833ec1461032a5780639b24b3b01461034a578063c87b56dd1461036a578063f2fde38b1461038a578063f577a500146103aa575b600080fd5b34801561010b57600080fd5b5061011f61011a36600461113b565b6103ca565b60405161012c919061116e565b60405180910390f35b34801561014157600080fd5b5061014a610437565b60405161012c91906111de565b34801561016357600080fd5b506006545b60405161012c91906111f5565b6101686101833660046112c9565b6104c9565b34801561019457600080fd5b506101686101a3366004611368565b610568565b3480156101b457600080fd5b506101c86101c33660046113a5565b6105cf565b60405161012c9190611438565b3480156101e157600080fd5b5061011f6101f0366004611449565b6001600160a01b0316600090815260036020526040902054151590565b34801561021957600080fd5b50600a546001600160a01b031660405161012c919061149f565b34801561023f57600080fd5b5061016861024e3660046113a5565b90565b34801561025d57600080fd5b5061027161026c3660046114cc565b6106be565b005b34801561027f57600080fd5b5061029361028e3660046113a5565b6106e8565b60405161012c91906114f6565b3480156102ac57600080fd5b50600754610168565b3480156102c157600080fd5b506101686102d0366004611449565b6001600160a01b031660009081526001602052604090205490565b3480156102f757600080fd5b50610271610706565b34801561030c57600080fd5b5061029361071a565b34801561032157600080fd5b5061014a610729565b34801561033657600080fd5b5061011f61034536600461160a565b610738565b34801561035657600080fd5b5061014a6103653660046113a5565b610b13565b34801561037657600080fd5b5061014a6103853660046113a5565b610bb5565b34801561039657600080fd5b506102716103a5366004611449565b610c2c565b3480156103b657600080fd5b5061011f6103c53660046113a5565b610c66565b60006001600160e01b0319821663a511533d60e01b14806103fb57506001600160e01b03198216635b5e139f60e01b145b8061041657506001600160e01b03198216632d57debd60e01b145b8061043157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060048054610446906116a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610472906116a4565b80156104bf5780601f10610494576101008083540402835291602001916104bf565b820191906000526020600020905b8154815290600101906020018083116104a257829003601f168201915b5050505050905090565b6000806104d587610c85565b6040805160606020601f8a0181900402820181018352918101888152929350918291899089908190850183828082843760009201919091525050509082525060200161052185876117d4565b90526000828152600b602052604090208151819061053f90826118a9565b506020828101518051610558926001850192019061105c565b5091925050505b95945050505050565b6001600160a01b0382166000908152600160205260408120805483106105a95760405162461bcd60e51b81526004016105a090611995565b60405180910390fd5b8083815481106105bb576105bb6119a5565b906000526020600020015491505092915050565b6060600b6000838152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b828210156106b3578382906000526020600020018054610626906116a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610652906116a4565b801561069f5780601f106106745761010080835404028352916020019161069f565b820191906000526020600020905b81548152906001019060200180831161068257829003601f168201915b505050505081526020019060010190610607565b505050509050919050565b6106c6610ceb565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006106f382610d1a565b600101546001600160a01b031692915050565b61070e610ceb565b6107186000610d52565b565b6009546001600160a01b031690565b606060058054610446906116a4565b6000808260038151811061074e5761074e6119a5565b602002602001015190508260008151811061076b5761076b6119a5565b60200260200101516001146107925760405162461bcd60e51b81526004016105a090611a08565b806001600160a01b03166107a5866106e8565b6001600160a01b0316146107cb5760405162461bcd60e51b81526004016105a090611a84565b60006107d686610b13565b9050836002815181106107eb576107eb6119a5565b60200260200101516040516020016108039190611a94565b604051602081830303815290604052805190602001208160405160200161082a9190611acb565b604051602081830303815290604052805190602001201461085d5760405162461bcd60e51b81526004016105a090611b45565b600060405180604001604052808760008151811061087d5761087d6119a5565b602002602001015181526020018760018151811061089d5761089d6119a5565b602002602001015181525090506000604051806040016040528060405180604001604052808a6002815181106108d5576108d56119a5565b602002602001015181526020018a6003815181106108f5576108f56119a5565b6020026020010151815250815260200160405180604001604052808a600481518110610923576109236119a5565b602002602001015181526020018a600581518110610943576109436119a5565b602002602001015181525081525090506000604051806040016040528089600681518110610973576109736119a5565b6020026020010151815260200189600781518110610993576109936119a5565b6020026020010151815250905060006040518060c00160405280896000815181106109c0576109c06119a5565b60200260200101518152602001896001815181106109e0576109e06119a5565b6020026020010151815260200189600281518110610a0057610a006119a5565b6020026020010151815260200189600381518110610a2057610a206119a5565b6020026020010151815260200189600481518110610a4057610a406119a5565b6020026020010151815260200189600581518110610a6057610a606119a5565b60209081029190910101519052600a5460405163f398789b60e01b81529192506001600160a01b03169063f398789b90610aa4908790879087908790600401611c2d565b602060405180830381865afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190611c77565b610b015760405162461bcd60e51b81526004016105a090611cc8565b600196505050505050505b9392505050565b6000818152600b60205260409020805460609190610b30906116a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c906116a4565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b50505050509050919050565b6060610bc082610d1a565b506000610bd860408051602081019091526000815290565b805190915015610c165780610bee846020610da4565b604051602001610bff929190611cd8565b604051602081830303815290604052915050919050565b5050604080516020810190915260008152919050565b610c34610ceb565b6001600160a01b038116610c5a5760405162461bcd60e51b81526004016105a090611d33565b610c6381610d52565b50565b6000610c7182610d1a565b60010154600160a01b900460ff1692915050565b600654610c9482826001610f0f565b7f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe8282604051610cc5929190611d43565b60405180910390a1600160066000828254610ce09190611d74565b909155509092915050565b33610cf461071a565b6001600160a01b0316146107185760405162461bcd60e51b81526004016105a090611db9565b600081815260208190526040812060018101546001600160a01b03166104315760405162461bcd60e51b81526004016105a090611995565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000610db3836002611dc9565b610dbe906002611d74565b6001600160401b03811115610dd557610dd5611504565b6040519080825280601f01601f191660200182016040528015610dff576020820181803683370190505b509050600360fc1b81600081518110610e1a57610e1a6119a5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610e4957610e496119a5565b60200101906001600160f81b031916908160001a9053506000610e6d846002611dc9565b610e78906001611d74565b90505b6001811115610ef0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610eac57610eac6119a5565b1a60f81b828281518110610ec257610ec26119a5565b60200101906001600160f81b031916908160001a90535060049490941c93610ee981611de8565b9050610e7b565b508315610b0c5760405162461bcd60e51b81526004016105a090611e31565b6000828152602081905260409020600101546001600160a01b031615610f475760405162461bcd60e51b81526004016105a090611e75565b6001600160a01b0383166000908152600160205260408120549003610f7f57600160076000828254610f799190611d74565b90915550505b604080516060810182523381526001600160a01b0385811660208084018281528615801586880190815260008a8152808552888120975188549088166001600160a01b031990911617885592516001978801805492511515600160a01b026001600160a81b03199093169190971617179094559182528381528482208054600283528684208985528352958320869055848252938501845592815291909120909101839055611057576001600160a01b0383166000908152600360205260408120805460019290611051908490611d74565b90915550505b505050565b8280548282559060005260206000209081019282156110a2579160200282015b828111156110a2578251829061109290826118a9565b509160200191906001019061107c565b506110ae9291506110b2565b5090565b808211156110ae5760006110c682826110cf565b506001016110b2565b5080546110db906116a4565b6000825580601f106110eb575050565b601f016020900490600052602060002090810190610c6391905b808211156110ae5760008155600101611105565b6001600160e01b031981165b8114610c6357600080fd5b803561043181611119565b60006020828403121561115057611150600080fd5b600061115c8484611130565b949350505050565b8015155b82525050565b602081016104318284611164565b60005b8381101561119757818101518382015260200161117f565b50506000910152565b601f01601f191690565b60006111b4825190565b8084526020840193506111cb81856020860161117c565b6111d4816111a0565b9093019392505050565b60208082528101610b0c81846111aa565b80611168565b6020810161043182846111ef565b6001600160a01b031690565b600061043182611203565b6111258161120f565b80356104318161121a565b60008083601f84011261124357611243600080fd5b5081356001600160401b0381111561125d5761125d600080fd5b60208301915083600182028301111561127857611278600080fd5b9250929050565b60008083601f84011261129457611294600080fd5b5081356001600160401b038111156112ae576112ae600080fd5b60208301915083602082028301111561127857611278600080fd5b6000806000806000606086880312156112e4576112e4600080fd5b60006112f08888611223565b95505060208601356001600160401b0381111561130f5761130f600080fd5b61131b8882890161122e565b945094505060408601356001600160401b0381111561133c5761133c600080fd5b6113488882890161127f565b92509250509295509295909350565b80611125565b803561043181611357565b6000806040838503121561137e5761137e600080fd5b600061138a8585611223565b925050602061139b8582860161135d565b9150509250929050565b6000602082840312156113ba576113ba600080fd5b600061115c848461135d565b6000610b0c83836111aa565b60006113dc825190565b808452602084019350836020820285016113f68560200190565b8060005b8581101561142b578484038952815161141385826113c6565b94506020830160209a909a01999250506001016113fa565b5091979650505050505050565b60208082528101610b0c81846113d2565b60006020828403121561145e5761145e600080fd5b600061115c8484611223565b600061043161147b61024e84611203565b611203565b60006104318261146a565b600061043182611480565b6111688161148b565b602081016104318284611496565b60006104318261120f565b611125816114ad565b8035610431816114b8565b6000602082840312156114e1576114e1600080fd5b600061115c84846114c1565b6111688161120f565b6020810161043182846114ed565b634e487b7160e01b600052604160045260246000fd5b611523826111a0565b81018181106001600160401b038211171561154057611540611504565b6040525050565b600061155260405190565b905061155e828261151a565b919050565b60006001600160401b0382111561157c5761157c611504565b5060209081020190565b600061159961159484611563565b611547565b838152905060208082019084028301858111156115b8576115b8600080fd5b835b818110156115dc57806115cd888261135d565b845250602092830192016115ba565b5050509392505050565b600082601f8301126115fa576115fa600080fd5b813561115c848260208601611586565b60008060006060848603121561162257611622600080fd5b600061162e868661135d565b93505060208401356001600160401b0381111561164d5761164d600080fd5b611659868287016115e6565b92505060408401356001600160401b0381111561167857611678600080fd5b611684868287016115e6565b9150509250925092565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806116b857607f821691505b6020821081036116ca576116ca61168e565b50919050565b60006001600160401b038211156116e9576116e9611504565b6116f2826111a0565b60200192915050565b82818337506000910152565b6000611715611594846116d0565b90508281526020810184848401111561173057611730600080fd5b61173b8482856116fb565b509392505050565b600082601f83011261175757611757600080fd5b813561115c848260208601611707565b600061177561159484611563565b8381529050602080820190840283018581111561179457611794600080fd5b835b818110156115dc5780356001600160401b038111156117b7576117b7600080fd5b8086016117c48982611743565b8552505060209283019201611796565b6000610b0c368484611767565b600061043161024e8381565b6117f6836117e1565b815460001960089490940293841b1916921b91909117905550565b60006110578184846117ed565b8181101561183957611831600082611811565b60010161181e565b5050565b601f821115611057576000818152602090206020601f850104810160208510156118645750805b6118766020601f86010483018261181e565b5050505050565b6000196008929092029190911c191690565b600061189b838361187d565b600290930290921792915050565b81516001600160401b038111156118c2576118c2611504565b6118cc82546116a4565b6118d782828561183d565b6020601f83116001811461190557600084156118f35750858201515b6118fd858261188f565b86555061195f565b600085815260208120601f198616915b828110156119355788850151825560209485019460019092019101611915565b86831015611952578489015161194e601f89168261187d565b8355505b6001600288020188555050505b505050505050565b6014815260006020820173151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b815291505b5060200190565b6020808252810161043181611967565b634e487b7160e01b600052603260045260246000fd5b602d81526000602082017f54686520636c61696d20646f65736e277420736174697366792074686520717581526c32b93c9031b7b73234ba34b7b760991b602082015291505b5060400190565b60208082528101610431816119bb565b604681526000602082017f5468652053425420646f65736e27742062656c6f6e6720746f2074686520616481527f6472657373207468617420697320747279696e6720746f20636c61696d20746860208201526532903637b0b760d11b604082015291505b5060600190565b6020808252810161043181611a18565b6000611aa082846111ef565b50602001919050565b6000611ab3825190565b611ac181856020860161117c565b9290920192915050565b6000610b0c8284611aa9565b604b81526000602082017f54686520726f6f74206f6620746865204d65726b6c652054726565277320646181527f746120646f65736e2774206d617463682074686520726f6f742073746f72656460208201526a081a5b881d1a194814d09560aa1b60408201529150611a7d565b6020808252810161043181611ad7565b6000611b6183836111ef565b505060200190565b6002818060005b8381101561195f578151611b848782611b55565b965060208301925050600101611b70565b6002818060005b8381101561195f578151611bb08782611b55565b965060208301925050600101611b9c565b6000611bcd8383611b95565b505060400190565b6002818060005b8381101561195f578151611bf08782611bc1565b965060208301925050600101611bdc565b6006818060005b8381101561195f578151611c1c8782611b55565b965060208301925050600101611c08565b6101c08101611c3c8287611b69565b611c496040830186611bd5565b611c5660c0830185611b69565b61055f610100830184611c01565b801515611125565b805161043181611c64565b600060208284031215611c8c57611c8c600080fd5b600061115c8484611c6c565b6019815260006020820178141c9bdbd9881d995c9a599a58d85d1a5bdb8819985a5b1959603a1b8152915061198e565b6020808252810161043181611c98565b6000611ce48285611aa9565b915061115c8284611aa9565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611a01565b6020808252810161043181611cf0565b60408101611d5182856114ed565b610b0c60208301846111ef565b634e487b7160e01b600052601160045260246000fd5b8082018082111561043157610431611d5e565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061198e565b6020808252810161043181611d87565b818102808215838204851417611de157611de1611d5e565b5092915050565b600081611df757611df7611d5e565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e749101908152600061198e565b6020808252810161043181611dff565b601d81526000602082017f43616e6e6f74206d696e7420616e2061737369676e656420746f6b656e0000008152915061198e565b6020808252810161043181611e4156fea2646970667358221220d5b9ec86b40b1e43ff3072a7b13edc4330525b96f39b71a3747154e27956b4cc64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100fa5760003560e01c806301ffc9a7146100ff57806306fdde031461013557806326019c181461015757806329f325f7146101755780632f745c59146101885780633ec0b0bc146101a857806343945512146101d557806346657fe91461020d5780634f6ccce7146102335780635437988d146102515780636352211e146102735780636b4ed21b146102a057806370a08231146102b5578063715018a6146102eb5780638da5cb5b1461030057806395d89b4114610315578063980833ec1461032a5780639b24b3b01461034a578063c87b56dd1461036a578063f2fde38b1461038a578063f577a500146103aa575b600080fd5b34801561010b57600080fd5b5061011f61011a36600461113b565b6103ca565b60405161012c919061116e565b60405180910390f35b34801561014157600080fd5b5061014a610437565b60405161012c91906111de565b34801561016357600080fd5b506006545b60405161012c91906111f5565b6101686101833660046112c9565b6104c9565b34801561019457600080fd5b506101686101a3366004611368565b610568565b3480156101b457600080fd5b506101c86101c33660046113a5565b6105cf565b60405161012c9190611438565b3480156101e157600080fd5b5061011f6101f0366004611449565b6001600160a01b0316600090815260036020526040902054151590565b34801561021957600080fd5b50600a546001600160a01b031660405161012c919061149f565b34801561023f57600080fd5b5061016861024e3660046113a5565b90565b34801561025d57600080fd5b5061027161026c3660046114cc565b6106be565b005b34801561027f57600080fd5b5061029361028e3660046113a5565b6106e8565b60405161012c91906114f6565b3480156102ac57600080fd5b50600754610168565b3480156102c157600080fd5b506101686102d0366004611449565b6001600160a01b031660009081526001602052604090205490565b3480156102f757600080fd5b50610271610706565b34801561030c57600080fd5b5061029361071a565b34801561032157600080fd5b5061014a610729565b34801561033657600080fd5b5061011f61034536600461160a565b610738565b34801561035657600080fd5b5061014a6103653660046113a5565b610b13565b34801561037657600080fd5b5061014a6103853660046113a5565b610bb5565b34801561039657600080fd5b506102716103a5366004611449565b610c2c565b3480156103b657600080fd5b5061011f6103c53660046113a5565b610c66565b60006001600160e01b0319821663a511533d60e01b14806103fb57506001600160e01b03198216635b5e139f60e01b145b8061041657506001600160e01b03198216632d57debd60e01b145b8061043157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060048054610446906116a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610472906116a4565b80156104bf5780601f10610494576101008083540402835291602001916104bf565b820191906000526020600020905b8154815290600101906020018083116104a257829003601f168201915b5050505050905090565b6000806104d587610c85565b6040805160606020601f8a0181900402820181018352918101888152929350918291899089908190850183828082843760009201919091525050509082525060200161052185876117d4565b90526000828152600b602052604090208151819061053f90826118a9565b506020828101518051610558926001850192019061105c565b5091925050505b95945050505050565b6001600160a01b0382166000908152600160205260408120805483106105a95760405162461bcd60e51b81526004016105a090611995565b60405180910390fd5b8083815481106105bb576105bb6119a5565b906000526020600020015491505092915050565b6060600b6000838152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b828210156106b3578382906000526020600020018054610626906116a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610652906116a4565b801561069f5780601f106106745761010080835404028352916020019161069f565b820191906000526020600020905b81548152906001019060200180831161068257829003601f168201915b505050505081526020019060010190610607565b505050509050919050565b6106c6610ceb565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60006106f382610d1a565b600101546001600160a01b031692915050565b61070e610ceb565b6107186000610d52565b565b6009546001600160a01b031690565b606060058054610446906116a4565b6000808260038151811061074e5761074e6119a5565b602002602001015190508260008151811061076b5761076b6119a5565b60200260200101516001146107925760405162461bcd60e51b81526004016105a090611a08565b806001600160a01b03166107a5866106e8565b6001600160a01b0316146107cb5760405162461bcd60e51b81526004016105a090611a84565b60006107d686610b13565b9050836002815181106107eb576107eb6119a5565b60200260200101516040516020016108039190611a94565b604051602081830303815290604052805190602001208160405160200161082a9190611acb565b604051602081830303815290604052805190602001201461085d5760405162461bcd60e51b81526004016105a090611b45565b600060405180604001604052808760008151811061087d5761087d6119a5565b602002602001015181526020018760018151811061089d5761089d6119a5565b602002602001015181525090506000604051806040016040528060405180604001604052808a6002815181106108d5576108d56119a5565b602002602001015181526020018a6003815181106108f5576108f56119a5565b6020026020010151815250815260200160405180604001604052808a600481518110610923576109236119a5565b602002602001015181526020018a600581518110610943576109436119a5565b602002602001015181525081525090506000604051806040016040528089600681518110610973576109736119a5565b6020026020010151815260200189600781518110610993576109936119a5565b6020026020010151815250905060006040518060c00160405280896000815181106109c0576109c06119a5565b60200260200101518152602001896001815181106109e0576109e06119a5565b6020026020010151815260200189600281518110610a0057610a006119a5565b6020026020010151815260200189600381518110610a2057610a206119a5565b6020026020010151815260200189600481518110610a4057610a406119a5565b6020026020010151815260200189600581518110610a6057610a606119a5565b60209081029190910101519052600a5460405163f398789b60e01b81529192506001600160a01b03169063f398789b90610aa4908790879087908790600401611c2d565b602060405180830381865afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190611c77565b610b015760405162461bcd60e51b81526004016105a090611cc8565b600196505050505050505b9392505050565b6000818152600b60205260409020805460609190610b30906116a4565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c906116a4565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b50505050509050919050565b6060610bc082610d1a565b506000610bd860408051602081019091526000815290565b805190915015610c165780610bee846020610da4565b604051602001610bff929190611cd8565b604051602081830303815290604052915050919050565b5050604080516020810190915260008152919050565b610c34610ceb565b6001600160a01b038116610c5a5760405162461bcd60e51b81526004016105a090611d33565b610c6381610d52565b50565b6000610c7182610d1a565b60010154600160a01b900460ff1692915050565b600654610c9482826001610f0f565b7f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe8282604051610cc5929190611d43565b60405180910390a1600160066000828254610ce09190611d74565b909155509092915050565b33610cf461071a565b6001600160a01b0316146107185760405162461bcd60e51b81526004016105a090611db9565b600081815260208190526040812060018101546001600160a01b03166104315760405162461bcd60e51b81526004016105a090611995565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606000610db3836002611dc9565b610dbe906002611d74565b6001600160401b03811115610dd557610dd5611504565b6040519080825280601f01601f191660200182016040528015610dff576020820181803683370190505b509050600360fc1b81600081518110610e1a57610e1a6119a5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610e4957610e496119a5565b60200101906001600160f81b031916908160001a9053506000610e6d846002611dc9565b610e78906001611d74565b90505b6001811115610ef0576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610eac57610eac6119a5565b1a60f81b828281518110610ec257610ec26119a5565b60200101906001600160f81b031916908160001a90535060049490941c93610ee981611de8565b9050610e7b565b508315610b0c5760405162461bcd60e51b81526004016105a090611e31565b6000828152602081905260409020600101546001600160a01b031615610f475760405162461bcd60e51b81526004016105a090611e75565b6001600160a01b0383166000908152600160205260408120549003610f7f57600160076000828254610f799190611d74565b90915550505b604080516060810182523381526001600160a01b0385811660208084018281528615801586880190815260008a8152808552888120975188549088166001600160a01b031990911617885592516001978801805492511515600160a01b026001600160a81b03199093169190971617179094559182528381528482208054600283528684208985528352958320869055848252938501845592815291909120909101839055611057576001600160a01b0383166000908152600360205260408120805460019290611051908490611d74565b90915550505b505050565b8280548282559060005260206000209081019282156110a2579160200282015b828111156110a2578251829061109290826118a9565b509160200191906001019061107c565b506110ae9291506110b2565b5090565b808211156110ae5760006110c682826110cf565b506001016110b2565b5080546110db906116a4565b6000825580601f106110eb575050565b601f016020900490600052602060002090810190610c6391905b808211156110ae5760008155600101611105565b6001600160e01b031981165b8114610c6357600080fd5b803561043181611119565b60006020828403121561115057611150600080fd5b600061115c8484611130565b949350505050565b8015155b82525050565b602081016104318284611164565b60005b8381101561119757818101518382015260200161117f565b50506000910152565b601f01601f191690565b60006111b4825190565b8084526020840193506111cb81856020860161117c565b6111d4816111a0565b9093019392505050565b60208082528101610b0c81846111aa565b80611168565b6020810161043182846111ef565b6001600160a01b031690565b600061043182611203565b6111258161120f565b80356104318161121a565b60008083601f84011261124357611243600080fd5b5081356001600160401b0381111561125d5761125d600080fd5b60208301915083600182028301111561127857611278600080fd5b9250929050565b60008083601f84011261129457611294600080fd5b5081356001600160401b038111156112ae576112ae600080fd5b60208301915083602082028301111561127857611278600080fd5b6000806000806000606086880312156112e4576112e4600080fd5b60006112f08888611223565b95505060208601356001600160401b0381111561130f5761130f600080fd5b61131b8882890161122e565b945094505060408601356001600160401b0381111561133c5761133c600080fd5b6113488882890161127f565b92509250509295509295909350565b80611125565b803561043181611357565b6000806040838503121561137e5761137e600080fd5b600061138a8585611223565b925050602061139b8582860161135d565b9150509250929050565b6000602082840312156113ba576113ba600080fd5b600061115c848461135d565b6000610b0c83836111aa565b60006113dc825190565b808452602084019350836020820285016113f68560200190565b8060005b8581101561142b578484038952815161141385826113c6565b94506020830160209a909a01999250506001016113fa565b5091979650505050505050565b60208082528101610b0c81846113d2565b60006020828403121561145e5761145e600080fd5b600061115c8484611223565b600061043161147b61024e84611203565b611203565b60006104318261146a565b600061043182611480565b6111688161148b565b602081016104318284611496565b60006104318261120f565b611125816114ad565b8035610431816114b8565b6000602082840312156114e1576114e1600080fd5b600061115c84846114c1565b6111688161120f565b6020810161043182846114ed565b634e487b7160e01b600052604160045260246000fd5b611523826111a0565b81018181106001600160401b038211171561154057611540611504565b6040525050565b600061155260405190565b905061155e828261151a565b919050565b60006001600160401b0382111561157c5761157c611504565b5060209081020190565b600061159961159484611563565b611547565b838152905060208082019084028301858111156115b8576115b8600080fd5b835b818110156115dc57806115cd888261135d565b845250602092830192016115ba565b5050509392505050565b600082601f8301126115fa576115fa600080fd5b813561115c848260208601611586565b60008060006060848603121561162257611622600080fd5b600061162e868661135d565b93505060208401356001600160401b0381111561164d5761164d600080fd5b611659868287016115e6565b92505060408401356001600160401b0381111561167857611678600080fd5b611684868287016115e6565b9150509250925092565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806116b857607f821691505b6020821081036116ca576116ca61168e565b50919050565b60006001600160401b038211156116e9576116e9611504565b6116f2826111a0565b60200192915050565b82818337506000910152565b6000611715611594846116d0565b90508281526020810184848401111561173057611730600080fd5b61173b8482856116fb565b509392505050565b600082601f83011261175757611757600080fd5b813561115c848260208601611707565b600061177561159484611563565b8381529050602080820190840283018581111561179457611794600080fd5b835b818110156115dc5780356001600160401b038111156117b7576117b7600080fd5b8086016117c48982611743565b8552505060209283019201611796565b6000610b0c368484611767565b600061043161024e8381565b6117f6836117e1565b815460001960089490940293841b1916921b91909117905550565b60006110578184846117ed565b8181101561183957611831600082611811565b60010161181e565b5050565b601f821115611057576000818152602090206020601f850104810160208510156118645750805b6118766020601f86010483018261181e565b5050505050565b6000196008929092029190911c191690565b600061189b838361187d565b600290930290921792915050565b81516001600160401b038111156118c2576118c2611504565b6118cc82546116a4565b6118d782828561183d565b6020601f83116001811461190557600084156118f35750858201515b6118fd858261188f565b86555061195f565b600085815260208120601f198616915b828110156119355788850151825560209485019460019092019101611915565b86831015611952578489015161194e601f89168261187d565b8355505b6001600288020188555050505b505050505050565b6014815260006020820173151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b815291505b5060200190565b6020808252810161043181611967565b634e487b7160e01b600052603260045260246000fd5b602d81526000602082017f54686520636c61696d20646f65736e277420736174697366792074686520717581526c32b93c9031b7b73234ba34b7b760991b602082015291505b5060400190565b60208082528101610431816119bb565b604681526000602082017f5468652053425420646f65736e27742062656c6f6e6720746f2074686520616481527f6472657373207468617420697320747279696e6720746f20636c61696d20746860208201526532903637b0b760d11b604082015291505b5060600190565b6020808252810161043181611a18565b6000611aa082846111ef565b50602001919050565b6000611ab3825190565b611ac181856020860161117c565b9290920192915050565b6000610b0c8284611aa9565b604b81526000602082017f54686520726f6f74206f6620746865204d65726b6c652054726565277320646181527f746120646f65736e2774206d617463682074686520726f6f742073746f72656460208201526a081a5b881d1a194814d09560aa1b60408201529150611a7d565b6020808252810161043181611ad7565b6000611b6183836111ef565b505060200190565b6002818060005b8381101561195f578151611b848782611b55565b965060208301925050600101611b70565b6002818060005b8381101561195f578151611bb08782611b55565b965060208301925050600101611b9c565b6000611bcd8383611b95565b505060400190565b6002818060005b8381101561195f578151611bf08782611bc1565b965060208301925050600101611bdc565b6006818060005b8381101561195f578151611c1c8782611b55565b965060208301925050600101611c08565b6101c08101611c3c8287611b69565b611c496040830186611bd5565b611c5660c0830185611b69565b61055f610100830184611c01565b801515611125565b805161043181611c64565b600060208284031215611c8c57611c8c600080fd5b600061115c8484611c6c565b6019815260006020820178141c9bdbd9881d995c9a599a58d85d1a5bdb8819985a5b1959603a1b8152915061198e565b6020808252810161043181611c98565b6000611ce48285611aa9565b915061115c8284611aa9565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611a01565b6020808252810161043181611cf0565b60408101611d5182856114ed565b610b0c60208301846111ef565b634e487b7160e01b600052601160045260246000fd5b8082018082111561043157610431611d5e565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65729101908152600061198e565b6020808252810161043181611d87565b818102808215838204851417611de157611de1611d5e565b5092915050565b600081611df757611df7611d5e565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e749101908152600061198e565b6020808252810161043181611dff565b601d81526000602082017f43616e6e6f74206d696e7420616e2061737369676e656420746f6b656e0000008152915061198e565b6020808252810161043181611e4156fea2646970667358221220d5b9ec86b40b1e43ff3072a7b13edc4330525b96f39b71a3747154e27956b4cc64736f6c63430008120033",
  "devdoc": {
    "author": "Miquel A. Cabot",
    "details": "Inherits from the SSBT contract",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "owner": "Address for whom to query the balance"
        },
        "returns": {
          "_0": "Number of tokens owned by `owner`"
        }
      },
      "constructor": {
        "details": "Creates a new ZKP SBT, inheriting from the SBT contract.",
        "params": {
          "admin": "Administrator of the smart contract",
          "name": "Name of the token",
          "symbol": "Symbol of the token",
          "verifier": "Verifier smart contract"
        }
      },
      "emittedCount()": {
        "returns": {
          "_0": "emittedCount Number of tokens emitted"
        }
      },
      "getEncryptedData(uint256)": {
        "params": {
          "tokenId": "The SBT ID"
        },
        "returns": {
          "_0": "The encrypted data with the public key of the owner of the SBT"
        }
      },
      "getRoot(uint256)": {
        "params": {
          "tokenId": "The SBT ID"
        },
        "returns": {
          "_0": "The root of the Merkle Tree's data without encryption, used to verify the data"
        }
      },
      "getVerifier()": {
        "returns": {
          "_0": "The verifier smart contract"
        }
      },
      "hasValid(address)": {
        "params": {
          "owner": "Address for whom to check the ownership"
        },
        "returns": {
          "_0": "True if `owner` has a valid token, false otherwise"
        }
      },
      "holdersCount()": {
        "returns": {
          "_0": "holdersCount Number of token holders"
        }
      },
      "isValid(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "True if the token is valid, false otherwise"
        }
      },
      "mint(address,bytes,bytes[])": {
        "details": "The caller must have the MINTER role",
        "params": {
          "encryptedData": "Encrypted data",
          "root": "Root of the Merkle Tree's data without encryption, used to verify the data",
          "to": "The address to mint the SBT to"
        },
        "returns": {
          "_0": "The SBT ID of the newly minted SBT"
        }
      },
      "name()": {
        "returns": {
          "_0": "Descriptive name of the tokens in this contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "Address of the owner of `tokenId`"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setVerifier(address)": {
        "details": "The caller must have the OWNER role",
        "params": {
          "verifier": "Verifier smart contract"
        }
      },
      "symbol()": {
        "returns": {
          "_0": "An abbreviated name of the tokens in this contract"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "Index of the token"
        },
        "returns": {
          "_0": "tokenId of the token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "Index of the token",
          "owner": "Address for whom to get the token"
        },
        "returns": {
          "_0": "tokenId of the token"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "URI for the token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ZKP SBT",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Minted(address,uint256)": {
        "notice": "Event emitted when a token `tokenId` is minted for `owner`"
      },
      "Revoked(address,uint256)": {
        "notice": "Event emitted when token `tokenId` of `owner` is revoked"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Count all tokens assigned to an owner"
      },
      "constructor": {
        "notice": "Creates a new ZKP SBT"
      },
      "getEncryptedData(uint256)": {
        "notice": "Returns the encrypted data with the public key of the owner of the SBT"
      },
      "getRoot(uint256)": {
        "notice": "Returns the root of the Merkle Tree's data without encryption, used to verify the data"
      },
      "getVerifier()": {
        "notice": "Returns the verifier smart contract"
      },
      "hasValid(address)": {
        "notice": "Check if an address owns a valid token in the contract"
      },
      "isValid(uint256)": {
        "notice": "Check if a token hasn't been revoked"
      },
      "mint(address,bytes,bytes[])": {
        "notice": "Mints a new SBT"
      },
      "ownerOf(uint256)": {
        "notice": "Get owner of a token"
      },
      "setVerifier(address)": {
        "notice": "Sets the verifier smart contract"
      },
      "tokenByIndex(uint256)": {
        "notice": "Get a tokenId by it's index, where 0 <= index < total()"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Get the tokenId of a token using its position in the owner's list"
      },
      "tokenURI(uint256)": {
        "notice": "URI to query to get the token's metadata"
      }
    },
    "notice": "Soulbound token implementing ZKP",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1767,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Token)1762_storage)"
      },
      {
        "astId": 1772,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_indexedTokenIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1778,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_tokenIdIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1782,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_numberOfValidTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1784,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1786,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1788,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_emittedCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1790,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_holdersCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1792,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_creator",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1452,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_verifier",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IVerifier)1442"
      },
      {
        "astId": 1463,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "sbtData",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(SBTData)1458_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IVerifier)1442": {
        "encoding": "inplace",
        "label": "contract IVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(SBTData)1458_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ZKSBT.SBTData)",
        "numberOfBytes": "32",
        "value": "t_struct(SBTData)1458_storage"
      },
      "t_mapping(t_uint256,t_struct(Token)1762_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC4671.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)1762_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SBTData)1458_storage": {
        "encoding": "inplace",
        "label": "struct ZKSBT.SBTData",
        "members": [
          {
            "astId": 1454,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1457,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "encryptedData",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Token)1762_storage": {
        "encoding": "inplace",
        "label": "struct ERC4671.Token",
        "members": [
          {
            "astId": 1757,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "issuer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1759,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1761,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "valid",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}