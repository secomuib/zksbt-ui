{
  "address": "0x1B830e25CcBf8C0D512653800a294876fA658c67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emittedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEncryptedData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "hasValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "holdersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "root",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedCreditScore",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedIncome",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedReportDate",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sbtData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "root",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedCreditScore",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedIncome",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "iv",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ephemPublicKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "ciphertext",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "mac",
              "type": "bytes"
            }
          ],
          "internalType": "struct ZKSBT.EncryptedData",
          "name": "encryptedReportDate",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeffeede00d460a6c7b59aaeec025eb1dcb83a704cc0eaeb0093c205b12dd5cac",
  "receipt": {
    "to": null,
    "from": "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "contractAddress": "0x1B830e25CcBf8C0D512653800a294876fA658c67",
    "transactionIndex": 16,
    "gasUsed": "2197211",
    "logsBloom": "0x
    "blockHash": "0xd9a48679fd5bb7114270d87627a47d1af9aa6062b64a956d8ee133555882ae0a",
    "transactionHash": "0xeffeede00d460a6c7b59aaeec025eb1dcb83a704cc0eaeb0093c205b12dd5cac",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 9798098,
        "transactionHash": "0xeffeede00d460a6c7b59aaeec025eb1dcb83a704cc0eaeb0093c205b12dd5cac",
        "address": "0x1B830e25CcBf8C0D512653800a294876fA658c67",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xd9a48679fd5bb7114270d87627a47d1af9aa6062b64a956d8ee133555882ae0a"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 9798098,
        "transactionHash": "0xeffeede00d460a6c7b59aaeec025eb1dcb83a704cc0eaeb0093c205b12dd5cac",
        "address": "0x1B830e25CcBf8C0D512653800a294876fA658c67",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0xd9a48679fd5bb7114270d87627a47d1af9aa6062b64a956d8ee133555882ae0a"
      }
    ],
    "blockNumber": 9798098,
    "cumulativeGasUsed": "5391296",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "ZKP SBT",
    "ZKSBT"
  ],
  "numDeployments": 1,
  "solcInputHash": "bbf39d6475e69d556b72ee5bd3c3669f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emittedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEncryptedData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"root\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedCreditScore\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedIncome\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedReportDate\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sbtData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"root\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedCreditScore\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedIncome\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"iv\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ephemPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ciphertext\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mac\",\"type\":\"bytes\"}],\"internalType\":\"struct ZKSBT.EncryptedData\",\"name\":\"encryptedReportDate\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Miquel A. Cabot\",\"details\":\"Inherits from the SSBT contract\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"owner\":\"Address for whom to query the balance\"},\"returns\":{\"_0\":\"Number of tokens owned by `owner`\"}},\"constructor\":{\"details\":\"Creates a new ZKP SBT, inheriting from the SBT contract.\",\"params\":{\"admin\":\"Administrator of the smart contract\",\"name\":\"Name of the token\",\"symbol\":\"Symbol of the token\"}},\"emittedCount()\":{\"returns\":{\"_0\":\"emittedCount Number of tokens emitted\"}},\"hasValid(address)\":{\"params\":{\"owner\":\"Address for whom to check the ownership\"},\"returns\":{\"_0\":\"True if `owner` has a valid token, false otherwise\"}},\"holdersCount()\":{\"returns\":{\"_0\":\"holdersCount Number of token holders\"}},\"isValid(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"True if the token is valid, false otherwise\"}},\"mint(address,bytes,(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes))\":{\"details\":\"The caller must have the MINTER role\",\"params\":{\"encryptedCreditScore\":\"Encrypted credit score\",\"encryptedIncome\":\"Encrypted income\",\"encryptedReportDate\":\"Encrypted report date\",\"root\":\"Root of the Merkle Tree's data without encryption, used to verify the data\",\"to\":\"The address to mint the SBT to\"},\"returns\":{\"_0\":\"The SBT ID of the newly minted SBT\"}},\"name()\":{\"returns\":{\"_0\":\"Descriptive name of the tokens in this contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"Address of the owner of `tokenId`\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"returns\":{\"_0\":\"An abbreviated name of the tokens in this contract\"}},\"tokenByIndex(uint256)\":{\"params\":{\"index\":\"Index of the token\"},\"returns\":{\"_0\":\"tokenId of the token\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"Index of the token\",\"owner\":\"Address for whom to get the token\"},\"returns\":{\"_0\":\"tokenId of the token\"}},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"Identifier of the token\"},\"returns\":{\"_0\":\"URI for the token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ZKP SBT\",\"version\":1},\"userdoc\":{\"events\":{\"Minted(address,uint256)\":{\"notice\":\"Event emitted when a token `tokenId` is minted for `owner`\"},\"Revoked(address,uint256)\":{\"notice\":\"Event emitted when token `tokenId` of `owner` is revoked\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Count all tokens assigned to an owner\"},\"constructor\":{\"notice\":\"Creates a new ZKP SBT\"},\"hasValid(address)\":{\"notice\":\"Check if an address owns a valid token in the contract\"},\"isValid(uint256)\":{\"notice\":\"Check if a token hasn't been revoked\"},\"mint(address,bytes,(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes))\":{\"notice\":\"Mints a new SBT\"},\"ownerOf(uint256)\":{\"notice\":\"Get owner of a token\"},\"tokenByIndex(uint256)\":{\"notice\":\"Get a tokenId by it's index, where 0 <= index < total()\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Get the tokenId of a token using its position in the owner's list\"},\"tokenURI(uint256)\":{\"notice\":\"URI to query to get the token's metadata\"}},\"notice\":\"Soulbound token implementing ZKP\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZKSBT.sol\":\"ZKSBT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ZKSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./eip-4671/ERC4671.sol\\\";\\n\\n/// @title ZKP SBT\\n/// @author Miquel A. Cabot\\n/// @notice Soulbound token implementing ZKP\\n/// @dev Inherits from the SSBT contract\\ncontract ZKSBT is ERC4671, Ownable {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    struct EncryptedData {\\n        bytes iv; // IV\\n        bytes ephemPublicKey; // ephemPublicKey\\n        bytes ciphertext; // ciphertext\\n        bytes mac; // mac\\n    }\\n\\n    // Struct to store the encrypted data with the public key of the owner of the SBT\\n    struct SBTData {\\n        bytes root; // root of the Merkle Tree's data without encryption, used to verify the data\\n        // encrypted data with the public key of the owner of the SBT\\n        EncryptedData encryptedCreditScore;\\n        EncryptedData encryptedIncome;\\n        EncryptedData encryptedReportDate;\\n    }\\n\\n    // tokenId => SBTData\\n    mapping(uint256 => SBTData) public sbtData;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new ZKP SBT\\n    /// @dev Creates a new ZKP SBT, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol\\n    ) ERC4671(name, symbol) {\\n        Ownable.transferOwnership(admin);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param to The address to mint the SBT to\\n    /// @param root Root of the Merkle Tree's data without encryption, used to verify the data\\n    /// @param encryptedCreditScore Encrypted credit score\\n    /// @param encryptedIncome Encrypted income\\n    /// @param encryptedReportDate Encrypted report date\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address to,\\n        bytes calldata root,\\n        EncryptedData calldata encryptedCreditScore,\\n        EncryptedData calldata encryptedIncome,\\n        EncryptedData calldata encryptedReportDate /* onlyOwner */\\n    ) external payable virtual returns (uint256) {\\n        uint256 tokenId = _mint(to);\\n\\n        sbtData[tokenId] = SBTData({\\n            root: root,\\n            encryptedCreditScore: encryptedCreditScore,\\n            encryptedIncome: encryptedIncome,\\n            encryptedReportDate: encryptedReportDate\\n        });\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    function getRoot(uint256 tokenId) external view returns (bytes memory) {\\n        return sbtData[tokenId].root;\\n    }\\n\\n    function getEncryptedData(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            EncryptedData memory,\\n            EncryptedData memory,\\n            EncryptedData memory\\n        )\\n    {\\n        return (\\n            sbtData[tokenId].encryptedCreditScore,\\n            sbtData[tokenId].encryptedIncome,\\n            sbtData[tokenId].encryptedReportDate\\n        );\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0xe71261978b756578b80fc49a00df813d32b28f01c91b8e818cabfa1fc0464c45\",\"license\":\"MIT\"},\"contracts/eip-4671/ERC4671.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./IERC4671.sol\\\";\\nimport \\\"./IERC4671Metadata.sol\\\";\\nimport \\\"./IERC4671Enumerable.sol\\\";\\n\\nabstract contract ERC4671 is\\n    IERC4671,\\n    IERC4671Metadata,\\n    IERC4671Enumerable,\\n    ERC165\\n{\\n    // Token data\\n    struct Token {\\n        address issuer;\\n        address owner;\\n        bool valid;\\n    }\\n\\n    // Mapping from tokenId to token\\n    mapping(uint256 => Token) private _tokens;\\n\\n    // Mapping from owner to token ids\\n    mapping(address => uint256[]) private _indexedTokenIds;\\n\\n    // Mapping from token id to index\\n    mapping(address => mapping(uint256 => uint256)) private _tokenIdIndex;\\n\\n    // Mapping from owner to number of valid tokens\\n    mapping(address => uint256) private _numberOfValidTokens;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Total number of tokens emitted\\n    uint256 private _emittedCount;\\n\\n    // Total number of token holders\\n    uint256 private _holdersCount;\\n\\n    // Contract creator\\n    address private _creator;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _creator = msg.sender;\\n    }\\n\\n    /// @notice Count all tokens assigned to an owner\\n    /// @param owner Address for whom to query the balance\\n    /// @return Number of tokens owned by `owner`\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        return _indexedTokenIds[owner].length;\\n    }\\n\\n    /// @notice Get owner of a token\\n    /// @param tokenId Identifier of the token\\n    /// @return Address of the owner of `tokenId`\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        return _getTokenOrRevert(tokenId).owner;\\n    }\\n\\n    /// @notice Check if a token hasn't been revoked\\n    /// @param tokenId Identifier of the token\\n    /// @return True if the token is valid, false otherwise\\n    function isValid(\\n        uint256 tokenId\\n    ) public view virtual override returns (bool) {\\n        return _getTokenOrRevert(tokenId).valid;\\n    }\\n\\n    /// @notice Check if an address owns a valid token in the contract\\n    /// @param owner Address for whom to check the ownership\\n    /// @return True if `owner` has a valid token, false otherwise\\n    function hasValid(\\n        address owner\\n    ) public view virtual override returns (bool) {\\n        return _numberOfValidTokens[owner] > 0;\\n    }\\n\\n    /// @return Descriptive name of the tokens in this contract\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @return An abbreviated name of the tokens in this contract\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @notice URI to query to get the token's metadata\\n    /// @param tokenId Identifier of the token\\n    /// @return URI for the token\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _getTokenOrRevert(tokenId);\\n        bytes memory baseURI = bytes(_baseURI());\\n        if (baseURI.length > 0) {\\n            return\\n                string(\\n                    abi.encodePacked(baseURI, Strings.toHexString(tokenId, 32))\\n                );\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    /// @return emittedCount Number of tokens emitted\\n    function emittedCount() public view override returns (uint256) {\\n        return _emittedCount;\\n    }\\n\\n    /// @return holdersCount Number of token holders\\n    function holdersCount() public view override returns (uint256) {\\n        return _holdersCount;\\n    }\\n\\n    /// @notice Get the tokenId of a token using its position in the owner's list\\n    /// @param owner Address for whom to get the token\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        uint256[] storage ids = _indexedTokenIds[owner];\\n        require(index < ids.length, \\\"Token does not exist\\\");\\n        return ids[index];\\n    }\\n\\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenByIndex(\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        return index;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC4671).interfaceId ||\\n            interfaceId == type(IERC4671Metadata).interfaceId ||\\n            interfaceId == type(IERC4671Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Prefix for all calls to tokenURI\\n    /// @return Common base URI for all token\\n    function _baseURI() internal pure virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @notice Mark the token as revoked\\n    /// @param tokenId Identifier of the token\\n    function _revoke(uint256 tokenId) internal virtual {\\n        Token storage token = _getTokenOrRevert(tokenId);\\n        require(token.valid, \\\"Token is already invalid\\\");\\n        token.valid = false;\\n        assert(_numberOfValidTokens[token.owner] > 0);\\n        _numberOfValidTokens[token.owner] -= 1;\\n        emit Revoked(token.owner, tokenId);\\n    }\\n\\n    /// @notice Mint a new token\\n    /// @param owner Address for whom to assign the token\\n    /// @return tokenId Identifier of the minted token\\n    function _mint(address owner) internal virtual returns (uint256 tokenId) {\\n        tokenId = _emittedCount;\\n        _mintUnsafe(owner, tokenId, true);\\n        emit Minted(owner, tokenId);\\n        _emittedCount += 1;\\n    }\\n\\n    /// @notice Mint a given tokenId\\n    /// @param owner Address for whom to assign the token\\n    /// @param tokenId Token identifier to assign to the owner\\n    /// @param valid Boolean to assert of the validity of the token\\n    function _mintUnsafe(address owner, uint256 tokenId, bool valid) internal {\\n        require(\\n            _tokens[tokenId].owner == address(0),\\n            \\\"Cannot mint an assigned token\\\"\\n        );\\n        if (_indexedTokenIds[owner].length == 0) {\\n            _holdersCount += 1;\\n        }\\n        _tokens[tokenId] = Token(msg.sender, owner, valid);\\n        _tokenIdIndex[owner][tokenId] = _indexedTokenIds[owner].length;\\n        _indexedTokenIds[owner].push(tokenId);\\n        if (valid) {\\n            _numberOfValidTokens[owner] += 1;\\n        }\\n    }\\n\\n    /// @return True if the caller is the contract's creator, false otherwise\\n    function _isCreator() internal view virtual returns (bool) {\\n        return msg.sender == _creator;\\n    }\\n\\n    /// @notice Retrieve a token or revert if it does not exist\\n    /// @param tokenId Identifier of the token\\n    /// @return The Token struct\\n    function _getTokenOrRevert(\\n        uint256 tokenId\\n    ) internal view virtual returns (Token storage) {\\n        Token storage token = _tokens[tokenId];\\n        require(token.owner != address(0), \\\"Token does not exist\\\");\\n        return token;\\n    }\\n\\n    /// @notice Remove a token\\n    /// @param tokenId Token identifier to remove\\n    function _removeToken(uint256 tokenId) internal virtual {\\n        Token storage token = _getTokenOrRevert(tokenId);\\n        _removeFromUnorderedArray(\\n            _indexedTokenIds[token.owner],\\n            _tokenIdIndex[token.owner][tokenId]\\n        );\\n        if (_indexedTokenIds[token.owner].length == 0) {\\n            assert(_holdersCount > 0);\\n            _holdersCount -= 1;\\n        }\\n        if (token.valid) {\\n            assert(_numberOfValidTokens[token.owner] > 0);\\n            _numberOfValidTokens[token.owner] -= 1;\\n        }\\n        delete _tokens[tokenId];\\n    }\\n\\n    /// @notice Removes an entry in an array by its index\\n    /// @param array Array for which to remove the entry\\n    /// @param index Index of the entry to remove\\n    function _removeFromUnorderedArray(\\n        uint256[] storage array,\\n        uint256 index\\n    ) internal {\\n        require(index < array.length, \\\"Trying to delete out of bound index\\\");\\n        if (index != array.length - 1) {\\n            array[index] = array[array.length - 1];\\n        }\\n        array.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x57385f8ebd3123d2408b5d03f0cd54a68039f9ae74a5695d54c5c2f5acf63557\",\"license\":\"CC0-1.0\"},\"contracts/eip-4671/IERC4671.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC4671 is IERC165 {\\n    /// Event emitted when a token `tokenId` is minted for `owner`\\n    event Minted(address owner, uint256 tokenId);\\n\\n    /// Event emitted when token `tokenId` of `owner` is revoked\\n    event Revoked(address owner, uint256 tokenId);\\n\\n    /// @notice Count all tokens assigned to an owner\\n    /// @param owner Address for whom to query the balance\\n    /// @return Number of tokens owned by `owner`\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /// @notice Get owner of a token\\n    /// @param tokenId Identifier of the token\\n    /// @return Address of the owner of `tokenId`\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /// @notice Check if a token hasn't been revoked\\n    /// @param tokenId Identifier of the token\\n    /// @return True if the token is valid, false otherwise\\n    function isValid(uint256 tokenId) external view returns (bool);\\n\\n    /// @notice Check if an address owns a valid token in the contract\\n    /// @param owner Address for whom to check the ownership\\n    /// @return True if `owner` has a valid token, false otherwise\\n    function hasValid(address owner) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x066b181b71b988f8bb2325f6a908765647f41c971541f99b319c58e27ae92251\",\"license\":\"CC0-1.0\"},\"contracts/eip-4671/IERC4671Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC4671.sol\\\";\\n\\ninterface IERC4671Enumerable is IERC4671 {\\n    /// @return emittedCount Number of tokens emitted\\n    function emittedCount() external view returns (uint256);\\n\\n    /// @return holdersCount Number of token holders\\n    function holdersCount() external view returns (uint256);\\n\\n    /// @notice Get the tokenId of a token using its position in the owner's list\\n    /// @param owner Address for whom to get the token\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /// @notice Get a tokenId by it's index, where 0 <= index < total()\\n    /// @param index Index of the token\\n    /// @return tokenId of the token\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd69c4184eeab03125ba5d23cb1d5df1b9c453c3aa42d7c276a8042fb848866ee\",\"license\":\"CC0-1.0\"},\"contracts/eip-4671/IERC4671Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC4671.sol\\\";\\n\\ninterface IERC4671Metadata is IERC4671 {\\n    /// @return Descriptive name of the tokens in this contract\\n    function name() external view returns (string memory);\\n\\n    /// @return An abbreviated name of the tokens in this contract\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice URI to query to get the token's metadata\\n    /// @param tokenId Identifier of the token\\n    /// @return URI for the token\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x896544fd1e8604925fff1daa332f9de78faa80c8aaabad0f140ae4a15576db72\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Miquel A. Cabot",
    "details": "Inherits from the SSBT contract",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "owner": "Address for whom to query the balance"
        },
        "returns": {
          "_0": "Number of tokens owned by `owner`"
        }
      },
      "constructor": {
        "details": "Creates a new ZKP SBT, inheriting from the SBT contract.",
        "params": {
          "admin": "Administrator of the smart contract",
          "name": "Name of the token",
          "symbol": "Symbol of the token"
        }
      },
      "emittedCount()": {
        "returns": {
          "_0": "emittedCount Number of tokens emitted"
        }
      },
      "hasValid(address)": {
        "params": {
          "owner": "Address for whom to check the ownership"
        },
        "returns": {
          "_0": "True if `owner` has a valid token, false otherwise"
        }
      },
      "holdersCount()": {
        "returns": {
          "_0": "holdersCount Number of token holders"
        }
      },
      "isValid(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "True if the token is valid, false otherwise"
        }
      },
      "mint(address,bytes,(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes))": {
        "details": "The caller must have the MINTER role",
        "params": {
          "encryptedCreditScore": "Encrypted credit score",
          "encryptedIncome": "Encrypted income",
          "encryptedReportDate": "Encrypted report date",
          "root": "Root of the Merkle Tree's data without encryption, used to verify the data",
          "to": "The address to mint the SBT to"
        },
        "returns": {
          "_0": "The SBT ID of the newly minted SBT"
        }
      },
      "name()": {
        "returns": {
          "_0": "Descriptive name of the tokens in this contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "Address of the owner of `tokenId`"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "returns": {
          "_0": "An abbreviated name of the tokens in this contract"
        }
      },
      "tokenByIndex(uint256)": {
        "params": {
          "index": "Index of the token"
        },
        "returns": {
          "_0": "tokenId of the token"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "Index of the token",
          "owner": "Address for whom to get the token"
        },
        "returns": {
          "_0": "tokenId of the token"
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "Identifier of the token"
        },
        "returns": {
          "_0": "URI for the token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ZKP SBT",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Minted(address,uint256)": {
        "notice": "Event emitted when a token `tokenId` is minted for `owner`"
      },
      "Revoked(address,uint256)": {
        "notice": "Event emitted when token `tokenId` of `owner` is revoked"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Count all tokens assigned to an owner"
      },
      "constructor": {
        "notice": "Creates a new ZKP SBT"
      },
      "hasValid(address)": {
        "notice": "Check if an address owns a valid token in the contract"
      },
      "isValid(uint256)": {
        "notice": "Check if a token hasn't been revoked"
      },
      "mint(address,bytes,(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes),(bytes,bytes,bytes,bytes))": {
        "notice": "Mints a new SBT"
      },
      "ownerOf(uint256)": {
        "notice": "Get owner of a token"
      },
      "tokenByIndex(uint256)": {
        "notice": "Get a tokenId by it's index, where 0 <= index < total()"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Get the tokenId of a token using its position in the owner's list"
      },
      "tokenURI(uint256)": {
        "notice": "URI to query to get the token's metadata"
      }
    },
    "notice": "Soulbound token implementing ZKP",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2089,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_tokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Token)2084_storage)"
      },
      {
        "astId": 2094,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_indexedTokenIds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2100,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_tokenIdIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2104,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_numberOfValidTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2106,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2108,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2110,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_emittedCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2112,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_holdersCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2114,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_creator",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "_owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1959,
        "contract": "contracts/ZKSBT.sol:ZKSBT",
        "label": "sbtData",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(SBTData)1954_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(SBTData)1954_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ZKSBT.SBTData)",
        "numberOfBytes": "32",
        "value": "t_struct(SBTData)1954_storage"
      },
      "t_mapping(t_uint256,t_struct(Token)2084_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC4671.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)2084_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(EncryptedData)1942_storage": {
        "encoding": "inplace",
        "label": "struct ZKSBT.EncryptedData",
        "members": [
          {
            "astId": 1935,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "iv",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1937,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "ephemPublicKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1939,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "ciphertext",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1941,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "mac",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SBTData)1954_storage": {
        "encoding": "inplace",
        "label": "struct ZKSBT.SBTData",
        "members": [
          {
            "astId": 1944,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "root",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1947,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "encryptedCreditScore",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(EncryptedData)1942_storage"
          },
          {
            "astId": 1950,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "encryptedIncome",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(EncryptedData)1942_storage"
          },
          {
            "astId": 1953,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "encryptedReportDate",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(EncryptedData)1942_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Token)2084_storage": {
        "encoding": "inplace",
        "label": "struct ERC4671.Token",
        "members": [
          {
            "astId": 2079,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "issuer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2081,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2083,
            "contract": "contracts/ZKSBT.sol:ZKSBT",
            "label": "valid",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}